{"version":3,"sources":["webpack:///webpack/bootstrap be94ec5a8928510c3165","webpack:///./bibliotheque/client.ts","webpack:///./bibliotheque/communication.ts","webpack:///./bibliotheque/vueClient.ts","webpack:///./jeu1_adressageRoutage/client/clientJeu1_adressageRoutage.ts","webpack:///./jeu1_adressageRoutage/commun/jeu1_adressageRoutage.ts","webpack:///./bibliotheque/types.ts","webpack:///./bibliotheque/outils.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;ACvDA;IAOI,qBAAY,OAAe;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,IAAI,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAC9E,CAAC;IAAA,CAAC;IAEF,uBAAuB;IACvB,oCAAc,GAAd,UAAe,GAA6B;QACxC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IACtC,CAAC;IAAA,CAAC;IAEF,uCAAuC;IACvC,sDAAgC,GAAhC,UAAiC,UAA6B;QAC1D,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAe;YAClE,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,GAAG,CAAC,qBAAqB,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC1C,MAAM,CAAC;YACX,CAAC;YACD,EAAE,CAAC,CAAC,GAAG,CAAC,kBAAkB,KAAK,SAAS,CAAC,CAAC,CAAC;gBACvC,MAAM,CAAC;YACX,CAAC;YACD,UAAU,CAAO,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF,uCAAuC;IACvC,6DAAuC,GAAvC,UAAwC,UAA2B;QAC/D,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAe;YAClE,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,WAAW,CAAC,qBAAqB,KAAK,SAAS,CAAC,CAAC,CAAC;gBAClD,MAAM,CAAC;YACX,CAAC;YACD,UAAU,CAAK,WAAW,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF,uCAAuC;IACvC,sDAAgC,GAAhC,UAAiC,UAA2B;QACxD,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,CAAe;YAClE,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,WAAW,CAAC,kBAAkB,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC/C,MAAM,CAAC;YACX,CAAC;YACD,UAAU,CAAK,WAAW,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAEN,kBAAC;AAAD,CAAC;AAnDY,kCAAW;AAmDvB,CAAC;AAEF,0BAIM,OAAe;IACjB,MAAM,CAAC,IAAI,WAAW,CAA0B,OAAO,CAAC,CAAC;AAC7D,CAAC;AAND,4CAMC;;;;;;;;;;;;;;;;;;;;;ACjED,sCASgB;AAOf,CAAC;AASF;IAKY,2BAAyB;IALrC;;IAOA,CAAC;IAAD,cAAC;AAAD,CAAC,CAFW,iBAAS,GAEpB;AAPqB,0BAAO;AAS7B;IAKY,iCAAyB;IALrC;;IAOA,CAAC;IAAD,oBAAC;AAAD,CAAC,CAFW,iBAAS,GAEpB;AAPqB,sCAAa;AASnC;IAKY,sCAAyB;IALrC;;IAOA,CAAC;IAAD,yBAAC;AAAD,CAAC,CAFW,iBAAS,GAEpB;AAPqB,gDAAkB;AAUxC;;;;;;;;;EASE;AAGF,kCAAkC;AAElC,2DAA2D;AAC3D;IAKY,0BAAsB;IALlC;;IAOA,CAAC;IAAD,aAAC;AAAD,CAAC,CAFW,iBAAS,GAEpB;AAPqB,wBAAM;AAiC5B;IACY,uCAAiE;IAGzE;eACI,kBAAM,QAAQ,EAAE,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,CAAC;IAC7B,CAAC;IAED,4CAAc,GAAd;QACI,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,YAAY;cACjD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IACD,sBAAsB;IACtB,0CAAY,GAAZ,UAAa,SAAgC;QACzC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IACD,wDAAwD;IACxD,yCAAW,GAAX,UAAY,UAAiC,EAAE,UAAiC;QAC5E,MAAM,CAAC,yCAAiC,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;YACjF,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC7B,CAAC;IACD,6CAAe,GAAf,UAAgB,CAA2D;QACvE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;IACD,mCAAK,GAAL,UAAM,SAAgC;QAClC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;IACD,gDAAkB,GAAlB;QACI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IACD,4CAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;IAC/B,CAAC;IACD,0CAAY,GAAZ,UAAa,CAAmB;QAC5B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACjC,CAAC;IACD,0CAAY,GAAZ,UAAa,CAAmB;QAC5B,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IACL,0BAAC;AAAD,CAAC,CAtCW,2BAAmB,GAsC9B;AAvCY,kDAAmB;AAyChC;IAGI,MAAM,CAAC,IAAI,mBAAmB,EAAE,CAAC;AACrC,CAAC;AAJD,0CAIC;AAeD,+BACI,CAAmB;IACnB,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,6BAAqB,CAAO,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;AAC3F,CAAC;AAiBD;IACY,2BAA6D;IAGrE,iBAAY,IAAsB;eAC9B,kBAAM,qBAAqB,EAAE,IAAI,CAAC;IACtC,CAAC;IAED,6BAAW,GAAX,UAAY,SAAgC;QACxC,MAAM,CAAC,yCAAiC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC;YACjE,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC5B,CAAC;IACD,kCAAgB,GAAhB,UAAiB,IAAsD;QACnE,yCAAiC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACpF,CAAC;IAED,+BAAa,GAAb,UAAc,CAAI;QACd,MAAM,CAAC,gCAAwB,CAAC,QAAQ,EAAE,WAAC,IAAI,QAAC,EAAD,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC;aAC/D,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC1B,CAAC;IAEL,cAAC;AAAD,CAAC,CApBW,iBAAS,GAoBpB;AArBqB,0BAAO;AAuB7B;IACY,2BAA6D;IAGrE,iBAAY,IAAsB;eAC9B,kBAAM,qBAAqB,EAAE,IAAI,CAAC;IACtC,CAAC;IAED,6BAAW,GAAX,UAAY,SAAgC;QACxC,MAAM,CAAC,yCAAiC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC;YACjE,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC5B,CAAC;IACD,kCAAgB,GAAhB,UAAiB,IAAsD;QACnE,yCAAiC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACpF,CAAC;IAEL,cAAC;AAAD,CAAC,CAfW,iBAAS,GAepB;AAhBqB,0BAAO;AAuB7B;IACY,4CAAa;IAGrB,kCACY,aAAqB,EACrB,aAAkD;QAF9D,YAII,kBAAM,WAAC,IAAI,QAAC,EAAD,CAAC,CAAC,SAEhB;QALW,mBAAa,GAAb,aAAa,CAAQ;QACrB,mBAAa,GAAb,aAAa,CAAqC;QAG1D,OAAO,CAAC,GAAG,CAAC,0CAA0C,GAAG,aAAa,CAAC,QAAQ,EAAE,GAAG,YAAY,CAAC,CAAC;;IACtG,CAAC;IACD,qEAAqE;IACrE,gDAAa,GAAb,UAAc,CAAI;QACd,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,CAAC,GAAG,CAAC,qEAAqE,CAAC,CAAC;QACvF,CAAC;IACL,CAAC;IAED,4CAAS,GAAT;QAAA,iBAeC;QAdG,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QACjD,EAAE,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;YACd,OAAO,CAAC,GAAG,CAAC,6EAA6E,GAAG,OAAO,GAAG,WAAW,CAAC,CAAC;YACnH,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC;QAC3E,CAAC;QACD,uBAAuB;QACvB,IAAI,MAAM,GAAqB,eAAe,EAAE,CAAC;QACjD,IAAI,CAAC,UAAU,CAAC,UAAC,CAAS,EAAE,CAAI;YAC5B,IAAI,CAAC,GAAe,KAAI,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,aAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACnG,CAAC,CAAC,aAAa,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YAC7D,CAAC,CAAC,aAAa,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,KAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,GAAG,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,+BAAC;AAAD,CAAC,CAnCW,eAAO,GAmClB;AAED,uCACI,MAAc,EACd,aAAoD;IAEpD,MAAM,CAAC,IAAI,wBAAwB,CAAK,MAAM,EAAE,aAAa,CAAC,CAAC;AACnE,CAAC;AALD,sEAKC;;;;;;;;;;;AC9QD,8BAA8B,EAAW;IACrC,IAAI,CAAC,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IACpC,EAAE,EAAC,OAAO,CAAC,KAAK,WAAW,CAAC,EAAC;QACzB,MAAM,IAAI,KAAK,CAAC,4BAA0B,EAAE,wBAAgB,CAAC,CAAC;IAClE,CAAC;IACD,MAAM,CAAc,CAAC,CAAC;AAC1B,CAAC;AAED,sBAA6B,EAAW;IACpC,MAAM,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;AACpC,CAAC;AAFD,oCAEC;AAED,qBAA4B,EAAW;IACnC,MAAM,CAAmB,oBAAoB,CAAC,EAAE,CAAC,CAAC;AACtD,CAAC;AAFD,kCAEC;AAED,yBAAgC,EAAW;IACvC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;AACjC,CAAC;AAFD,0CAEC;AAED,2BAAkC,EAAW,EAAE,GAAY;IACvD,WAAW,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC;AAChC,CAAC;AAFD,8CAEC;AAED,6BAAoC,OAAgB;IAChD,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC5B,CAAC;AAFD,kDAEC;AAED,uBAA8B,KAAa;IACvC,IAAI,CAAC,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACpC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;AACvB,CAAC;AAHD,sCAGC;AAED,gBAAuB,EAAW,EAAE,GAAW;IAC3C,IAAI,CAAC,GAAG,oBAAoB,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC,CAAC,SAAS,IAAI,GAAG,CAAC;AACvB,CAAC;AAHD,wBAGC;AAED,kBAAyB,EAAU,EAAE,GAAW;IAC5C,MAAM,CAAC,EAAE,EAAE,GAAG,GAAG,MAAM,CAAC,CAAC;AAC7B,CAAC;AAFD,4BAEC;AAED,gCAAuC,IAAY,EAAE,YAAgC;IACjF,OAAO,CAAC,GAAG,CAAC,iEAAiE,GAAG,IAAI,CAAC,CAAC;IACtF,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAsC,YAAY,CAAC,CAAC;AACtF,CAAC;AAHD,wDAGC;AAGD,+BAAsC,EAAU,EAAE,IAAY,EAAE,YAAgC;IAC5F,IAAI,CAAC,GAAG,oBAAoB,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC,CAAC,gBAAgB,CAAC,IAAI,EAAsC,YAAY,CAAC,CAAC;AAC/E,CAAC;AAHD,sDAGC;AAED,4BAAmC,QAAiB,EAAE,aAAqB,EAAE,GAAY;IACrF,MAAM,CAAC,yBAAyB,GAAG,QAAQ,GAAG,IAAI;UAC5C,0CAA0C,GAAG,aAAa,GAAG,WAAW,GAAG,GAAG,GAAE,KAAK,CAAC;AAChG,CAAC;AAHD,gDAGC;;;;;;;;;;;ACxDD,sCAGmC;AAGnC,2CAIsC;AACtC,wCAA0E;AAC1E,uDAWyC;AAGzC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AAEtC,IAAM,cAAc,GAAW,4BAAI,GAAG,GAAG,GAAG,6BAAK,CAAC;AAOlD,gBAAgB;AAChB,IAAI,KAAgB,CAAC;AACrB,IAAI,KAAkB,CAAC;AACvB,IAAI,UAA6B,CAAC;AAClC,IAAI,WAAyB,CAAC;AAI9B,wBAAwB,KAAa,EAAE,YAAmC;IACtE;;;;;MAKE;AACN,CAAC;AAED,yCAAyC;AACzC,sCAAsC;AACtC;IACI,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;IAExD,OAAO,CAAC,GAAG,CAAC,wDAAwD,GAAG,cAAc,CAAC,CAAC;IACvF,KAAK,GAAG,yBAAgB,CAAC,cAAc,CAAC,CAAC;IAEzC,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;IAC5C,KAAK,CAAC,gCAAgC,CAAC,UAAC,CAAsB;QAC1D;;;;;UAKE;IACN,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;IACnD,KAAK,CAAC,uCAAuC,CAAC,UAAC,CAA4B;QACvE,IAAI,MAAM,GAAG,8CAAsB,CAAC,CAAC,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAC9D,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;QACnD,IAAI,SAAS,GAAG,+CAAuB,CAAC,MAAM,CAAC,CAAC;QAChD,KAAK,GAAG,wCAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACvC,UAAU,GAAG,6CAAqB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,WAAW,GAAG,wCAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;IACzD,KAAK,CAAC,gCAAgC,CAAC,UAAC,GAAuB;QAC3D,IAAI,MAAM,GAAG,uCAAe,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QACnE,OAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;QAC7E,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAC5C,+BAAmB,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AAEP,CAAC;AAED;IACI,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IACzC,OAAO,CAAC,GAAG,CAAC,mFAAmF,CAAC,CAAC;IACjG,kBAAM,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;IACzC,kBAAM,CAAC,QAAQ,EAAE,uCAAe,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC;IACtE,kBAAM,CAAC,SAAS,EAAE,2BAAmB,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC;IAC5E,kBAAM,CAAC,aAAa,EAAE,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC;IACpD,kBAAM,CAAC,qBAAqB,EAAE,UAAU,CAAC,cAAc,EAAE,CAAC,CAAC;IAE3D;;;;;;;;;;;;;;;;;;MAkBE;IACF;;;;MAIE;AAEN,CAAC;AAED,0CAA0C;AAC1C,OAAO,CAAC,GAAG,CAAC,oDAAoD,CAAC,CAAC;AAClE,kCAAsB,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC;AAC3D;;;;;EAKE;;;;;;;;;;;;;;;;;;;;;AC5IF,+CAO0C;AAE1C,sCAQkC;AAElC,uCAAmD;AAItC,YAAI,GAAW,QAAQ,CAAC,CAAC,gEAAgE;AACzF,aAAK,GAAG,IAAI,CAAC,CAAC,iDAAiD;AAC/D,aAAK,GAAW,IAAI,CAAC,CAAC,gDAAgD;AAEnF,0EAA0E;AAC7D,qBAAa,GAA0B,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;AAC3E,sBAAc,GAA2B,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;AAW3F;IACY,8BAAmE;IAE3E,oBAAY,IAAwB;eAChC,kBAAM,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,EAAE,IAAI,CAAC;IACzB,CAAC;IAED,wBAAG,GAAH,UAAI,CAAsB;QACtB,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAClB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;YAClD,KAAK,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;QAC/B,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,mCAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;IAC7D,CAAC;IACL,iBAAC;AAAD,CAAC,CAjBW,sBAAM,GAiBjB;AAlBY,gCAAU;AAoBvB,yBAAgC,CAAqB;IACjD,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC;AAFD,0CAEC;AAID;IAAiC,+BAA2B;IAA5D;;IAaA,CAAC;IAXG,yBAAG,GAAH,UAAI,CAAiB;QACjB,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAClB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC;YACjE,KAAK,SAAS,EAAE,MAAM,CAAC,2BAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC;QAC3E,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,oCAAc,GAAd;QACI,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;IAC3F,CAAC;IACL,kBAAC;AAAD,CAAC,CAbgC,uBAAO,GAavC;AAbY,kCAAW;AAexB,0BAAiC,CAAoB;IACjD,MAAM,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC;AAFD,4CAEC;AAKD;IAAiC,+BAA2B;IAA5D;;IAaA,CAAC;IAXG,yBAAG,GAAH,UAAI,CAAiB;QACjB,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAClB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC;YACjE,KAAK,SAAS,EAAE,MAAM,CAAC,2BAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC;QAC3E,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,oCAAc,GAAd;QACI,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;IAC3F,CAAC;IACL,kBAAC;AAAD,CAAC,CAbgC,uBAAO,GAavC;AAbY,kCAAW;AAexB,0BAAiC,CAAoB;IACjD,MAAM,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC;AAFD,4CAEC;AAOD;;;;;;;;EAQE;AAEF,IAAY,EAGX;AAHD,WAAY,EAAE;IACV,+BAAM;IACN,6BAAK;AACT,CAAC,EAHW,EAAE,GAAF,UAAE,KAAF,UAAE,QAGb;AAED,IAAY,eAcX;AAdD,WAAY,eAAe;IACvB,qDAAI;IACJ,2DAAO;IACP,uDAAK;IACL,mDAAG;IACH,yEAAc;IACd,uEAAa;IACb,iEAAU;IACV,+DAAS;IACT,6EAAgB;IAChB,mEAAW;IACX,oEAAW;IACX,oEAAW;IACX,sEAAY;AAChB,CAAC,EAdW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAc1B;AAeD,sBAAsB;AACtB;IACI,+BAAuE;IAEvE,qBAAY,IAAyB;eACjC,kBAAM,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,EAAE,IAAI,CAAC;IACzB,CAAC;IAED,yBAAG,GAAH,UAAI,CAAuB;QACvB,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACpB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC;YAC7B,KAAK,MAAM,EAAE,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC9C,KAAK,MAAM,EAAE,MAAM,CAAC,iBAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;YACzD,KAAK,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC;YACxC,KAAK,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC;YAC3C,KAAK,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QACxD,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAED,oCAAc,GAAd;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC5B,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC7B,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,GAAG,GAAG,KAAK,GAAG,EAAE,GAAG,IAAI,GAAG,KAAK,GAAG,MAAM,GAAG,EAAE,CAAC;IACzF,CAAC;IAGD,wDAAwD;IACxD,2DAA2D;IAC3D,kCAAY,GAAZ,UAAa,UAAkB,EAAE,cAAsB;QACnD,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,WAAW,CAAC;YACnB,IAAI,EAAE,GAAG,CAAC,EAAE;YACZ,YAAY,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE;YAClD,gBAAgB,EAAE,EAAE,GAAG,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE;YAC1D,MAAM,EAAE,GAAG,CAAC,IAAI;YAChB,SAAS,EAAE,GAAG,CAAC,OAAO;YACtB,MAAM,EAAE,GAAG,CAAC,IAAI;SACnB,CAAC,CAAC;IACP,CAAC;IAED,iDAAiD;IACjD,+BAAS,GAAT;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,WAAW,CAAC;YACnB,IAAI,EAAE,GAAG,CAAC,EAAE;YACZ,YAAY,EAAE,GAAG,CAAC,UAAU;YAC5B,gBAAgB,EAAE,GAAG,CAAC,cAAc;YACpC,MAAM,EAAE,eAAe,CAAC,OAAO;YAC/B,SAAS,EAAE,GAAG,CAAC,OAAO;YACtB,MAAM,EAAE,GAAG,CAAC,IAAI;SACnB,CAAC,CAAC;IACP,CAAC;IAED,+DAA+D;IAC/D,gDAA0B,GAA1B,UAA2B,MAAU;QACjC,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACpB,IAAI,IAAqB,CAAC;QAC1B,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACb,KAAK,EAAE,CAAC,MAAM;gBAAE,IAAI,GAAG,eAAe,CAAC,cAAc,CAAC;gBAAC,KAAK,CAAC;YAC7D,KAAK,EAAE,CAAC,KAAK;gBAAE,IAAI,GAAG,eAAe,CAAC,aAAa,CAAC;gBAAC,KAAK,CAAC;YAC3D,SAAS,MAAM,CAAC,eAAM,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;QACD,MAAM,CAAC,IAAI,WAAW,CAAC;YACnB,IAAI,EAAE,GAAG,CAAC,EAAE;YACZ,YAAY,EAAE,GAAG,CAAC,UAAU;YAC5B,gBAAgB,EAAE,GAAG,CAAC,cAAc;YACpC,MAAM,EAAE,IAAI;YACZ,SAAS,EAAE,GAAG,CAAC,OAAO;YACtB,MAAM,EAAE,GAAG,CAAC,IAAI;SACnB,CAAC,CAAC;IACP,CAAC;IAED,qDAAqD;IACrD,8BAAQ,GAAR;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,WAAW,CAAC;YACnB,IAAI,EAAE,GAAG,CAAC,EAAE;YACZ,YAAY,EAAE,GAAG,CAAC,UAAU;YAC5B,gBAAgB,EAAE,GAAG,CAAC,cAAc;YACpC,MAAM,EAAE,eAAe,CAAC,KAAK;YAC7B,SAAS,EAAE,GAAG,CAAC,OAAO;YACtB,MAAM,EAAE,GAAG,CAAC,IAAI;SACnB,CAAC,CAAC;IACP,CAAC;IAED,qDAAqD;IACrD,gCAAU,GAAV;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,WAAW,CAAC;YACnB,IAAI,EAAE,GAAG,CAAC,EAAE;YACZ,YAAY,EAAE,GAAG,CAAC,UAAU;YAC5B,gBAAgB,EAAE,GAAG,CAAC,cAAc;YACpC,MAAM,EAAE,eAAe,CAAC,GAAG;YAC3B,SAAS,EAAE,GAAG,CAAC,OAAO;YACtB,MAAM,EAAE,GAAG,CAAC,IAAI;SACnB,CAAC,CAAC;IACP,CAAC;IAED,2DAA2D;IAC3D,mDAA6B,GAA7B,UAA8B,MAAU;QACpC,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACpB,IAAI,IAAqB,CAAC;QAC1B,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACb,KAAK,EAAE,CAAC,MAAM;gBAAE,IAAI,GAAG,eAAe,CAAC,UAAU,CAAC;gBAAC,KAAK,CAAC;YACzD,KAAK,EAAE,CAAC,KAAK;gBAAE,IAAI,GAAG,eAAe,CAAC,SAAS,CAAC;gBAAC,KAAK,CAAC;YACvD,SAAS,MAAM,CAAC,eAAM,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;QACD,MAAM,CAAC,IAAI,WAAW,CAAC;YACnB,IAAI,EAAE,GAAG,CAAC,EAAE;YACZ,YAAY,EAAE,GAAG,CAAC,UAAU;YAC5B,gBAAgB,EAAE,GAAG,CAAC,cAAc;YACpC,MAAM,EAAE,IAAI;YACZ,SAAS,EAAE,GAAG,CAAC,OAAO;YACtB,MAAM,EAAE,GAAG,CAAC,IAAI;SACnB,CAAC,CAAC;IACP,CAAC;IACL,kBAAC;AAAD,CAAC,CAxHG,uBAAO,GAwHV;AAzHY,kCAAW;AA2HxB,wCAAwC;AACxC,6BAAoC,OAAY;IAC5C,MAAM,CAAC,IAAI,WAAW,CAAC;QACnB,IAAI,EAAE,sBAAc;QACpB,YAAY,EAAE,qBAAa;QAC3B,gBAAgB,EAAE,qBAAa;QAC/B,MAAM,EAAE,eAAe,CAAC,IAAI;QAC5B,SAAS,EAAE,OAAO;QAClB,MAAM,EAAE,2BAAmB,EAAE,CAAC,EAAE,EAAE;KACrC,CAAC,CAAC;AACP,CAAC;AATD,kDASC;AAiDD;IACI,+BAAyE;IAEzE,qBAAY,CAAsB;eAC9B,kBAAM,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,EAAE,CAAC,CAAC;IACtB,CAAC;IAED,yBAAG,GAAH,UAAI,CAAuB;QACvB,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAClB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;YAC3B,KAAK,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;QACjD,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAED,oCAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;IACzD,CAAC;IAEL,kBAAC;AAAD,CAAC,CAnBG,iBAAS,GAmBZ;AApBY,kCAAW;AAsBxB,0BAAiC,CAAsB;IACnD,MAAM,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC;AAFD,4CAEC;AAKD,+EAA+E;AAE/E;IACY,oCACiC;IACzC,0BAAY,GAA6B;eACrC,kBAAM,aAAa,EAAE,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,EAAE,GAAG,CAAC;IACvC,CAAC;IACD,qCAAU,GAAV,UACI,CAA0E;QAE1E,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC;IACL,uBAAC;AAAD,CAAC,CAVW,2BAAmB,GAU9B;AAXY,4CAAgB;AAa7B;IACI,MAAM,CAAC,IAAI,gBAAgB,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;AAC/C,CAAC;AAFD,8DAEC;AACD,+BAAsC,GAA6B;IAE/D,MAAM,CAAC,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;AACrC,CAAC;AAHD,sDAGC;AAGD,iCACI,OAAe,EAAE,IAAW;IAC5B,IAAI,cAAc,GACZ,sCAA8B,CAAC,OAAO,CAAC,CAAC;IAC9C,IAAI,GAAG,GAAG,yBAAyB,EAAE,CAAC;IACtC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,CAAS,EAAE,GAAU;QACzC,IAAI,CAAC,GACC,EAAE,EAAE,EAAE,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACvE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,GAAG,CAAC;AACf,CAAC;AAXD,0DAWC;AAyBD;IACY,qCAEmB;IAE3B,2BAAY,CAA4B;eACpC,kBAAM,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,EAAE,CAAC,CAAC;IACtB,CAAC;IAED,+BAAG,GAAH,UAAI,CAA6B;QAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACvB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,CAAC;YACtE,KAAK,YAAY;gBACb,MAAM,CAAC,2BAAmB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC;YACnE,KAAK,aAAa,EAAE,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC;YACjF,KAAK,SAAS,EAAE,MAAM,CAAC,2BAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC;YAC5E,KAAK,MAAM,EAAE,MAAM,CAAC,iBAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;QAChE,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAED,0CAAc,GAAd;QACI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACjC,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACnC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC5B,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACzB,MAAM,CAAC,YAAY,GAAG,CAAC;cACjB,kBAAkB,GAAG,GAAG;cACxB,mBAAmB,GAAG,IAAI;cAC1B,eAAe,GAAG,CAAC;cACnB,eAAe,GAAG,CAAC,GAAG,GAAG,CAAC;IACpC,CAAC;IACL,wBAAC;AAAD,CAAC,CAjCW,6BAAa,GAiCxB;AAlCY,8CAAiB;AAoC9B,gCAAuC,CAA4B;IAC/D,MAAM,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC;AAFD,wDAEC;AAGD,mCACI,CAAoB,EACpB,GAA6B,EAC7B,CAAsB,EACtB,IAAoB;IACpB,MAAM,CAAC,IAAI,iBAAiB,CAAC;QACzB,uBAAuB,EAAE,aAAK,CAAC,IAAI;QACnC,QAAQ,EAAE,CAAC,CAAC,MAAM;QAClB,YAAY,EAAE,GAAG;QACjB,aAAa,EAAE,CAAC;QAChB,SAAS,EAAE,CAAC,CAAC,OAAO;QACpB,MAAM,EAAE,IAAI;KACf,CAAC,CAAC;AACP,CAAC;AAbD,8DAaC;AAED,iCAAwC,CAAoB;IAExD,IAAI,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;IACpB,IAAI,MAAM,GAAuB,MAAM,CAAC,MAAM,CAAC;IAC/C,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;IAC7B,IAAI,CAAC,GAAsB,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;IACpE,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC;IAC5B,IAAI,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC;IAC3B,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AACvB,CAAC;AATD,0DASC;AASD;IACY,8BAEP;IAED,oBAAY,GAAuB;eAC/B,kBAAM,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,EAAE,GAAG,CAAC;IACxB,CAAC;IAED,wBAAG,GAAH,UAAI,CAAsB;QACtB,IAAI,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACvB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,eAAe,EAAE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC;YAClD,KAAK,MAAM,EAAE,MAAM,CAAC,iBAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;QAChE,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,mCAAc,GAAd;QACI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,GAAG,CAAC;IAC5E,CAAC;IACL,iBAAC;AAAD,CAAC,CAnBW,kCAAkB,GAmB7B;AApBY,gCAAU;AAsBvB,yBAAgC,GAAuB;IACnD,MAAM,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC;AAFD,0CAEC;AAGD,4BAAmC,GAAW,EAAE,IAAoB;IAChE,MAAM,CAAC,IAAI,UAAU,CAAC;QAClB,oBAAoB,EAAE,aAAK,CAAC,IAAI;QAChC,eAAe,EAAE,GAAG;QACpB,MAAM,EAAE,IAAI;KACf,CAAC,CAAC;AACP,CAAC;AAND,gDAMC;AAED,yBAAgC,QAAe;IAC3C,IAAI,UAAU,GACR,6CAA6B,CAAC,QAAQ,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IACvE,IAAI,cAAc,GACZ,sCAA8B,CAAC,MAAM,CAAC,CAAC;IAC7C,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAQ,EAAE,CAAS,EAAE,GAAU;QAC7C,IAAI,CAAC,GACC,EAAE,EAAE,EAAE,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACnE,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;AAClC,CAAC;AAXD,0CAWC;AAED;IACY,qCACiC;IACzC;eACI,kBAAM,aAAa,EAAE,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,CAAC;IAClC,CAAC;IACL,wBAAC;AAAD,CAAC,CALW,2BAAmB,GAK9B;AAED;IACY,wCAGP;IAED;eACI,kBAAM,QAAQ,EAAE,UAAC,CAAoB,IAAK,QAAC,CAAC,EAAE,EAAE,EAAN,CAAM,CAAC;IACrD,CAAC;IAED,kDAAmB,GAAnB,UAAoB,MAA6B,EAAE,OAAmC;QAClF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IAED,0CAAW,GAAX,UAAY,MAA6B,EAAE,OAAmC;QAC1E,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAGD,6CAAc,GAAd,UAAe,MAA6B;QACxC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,iBAAiB,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,iDAAkB,GAAlB,UAAmB,MAA6B,EAAE,CAAsB;QACpE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED,iDAAkB,GAAlB,UAAmB,MAA6B,EAAE,OAAmC;QACjF,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,sDAAuB,GAAvB;QACI,IAAI,MAAM,GAAG,IAAI,CAAC,4BAA4B,CAAC,aAAG,IAAI,QAAC,GAAG,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QACtE,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,CAAC;QACnD,MAAM,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC7B,CAAC;IAEL,2BAAC;AAAD,CAAC,CAvCW,2BAAmB,GAuC9B;AAxCY,oDAAoB;AA0CjC;IACI,MAAM,CAAC,IAAI,oBAAoB,EAAE,CAAC;AACtC,CAAC;AAFD,sEAEC;AAED,uCACI,MAAkB,EAAE,IAAW;IAC/B,IAAI,MAAM,GAAG,6BAA6B,EAAE,CAAC;IAC7C,MAAM,CAAC,eAAe,CAAC,UAAC,MAAM,EAAE,CAAC;QAC7B,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC9B,IAAI,MAAM,GAAG,uBAAuB,CAAC,OAAO,GAAG,MAAM,CAAC,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,UAAC,OAAO,EAAE,CAAC;YACzB,MAAM,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,MAAM,CAAC;AAClB,CAAC;AAXD,sEAWC;;;;;;;;;;;;;;;;;;;;;ACvmBD,uBAAuB;AACvB,uCAAuD;AAEvD,0CAA0C;AAC1C,IAAY,KAAc;AAA1B,WAAY,KAAK;IAAG,iCAAI;AAAC,CAAC,EAAd,KAAK,GAAL,aAAK,KAAL,aAAK,QAAS;AAC1B,IAAY,IAGX;AAHD,WAAY,IAAI;IACZ,+BAAI;IACJ,2BAAE;AACN,CAAC,EAHW,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAGf;AAiBD,8CAA8C;AAC9C,wEAAwE;AACxE,gDAAgD;AAChD,wFAAwF;AACxF,8DAA8D;AAC9D,qDAAqD;AACrD,sEAAsE;AACtE,6DAA6D;AAE7D,6CAA6C;AAC7C,4EAA4E;AAC5E,6FAA6F;AAC7F,kEAAkE;AAClE,wGAAwG;AACxG,0DAA0D;AAC1D,mGAAmG;AACnG,+DAA+D;AAC/D,4CAA4C;AAC5C,0CAA0C;AAC1C,6DAA6D;AAE7D;IAGI,mBAAY,MAAuB,EAAE,IAAS;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IACS,sBAAE,GAAZ;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IACD,sBAAE,GAAF;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IACD,qDAAqD;IACrD,wBAAI,GAAJ;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAAA,CAAC;IAIN,gBAAC;AAAD,CAAC;AApBqB,8BAAS;AAsB/B;;EAEE;AAEF,IAAY,OAQX;AARD,WAAY,OAAO;IACf,uCAAK;IACL,uCAAK;IACL,6CAAQ;IACR,uCAAK;IACL,6CAAQ;IACR,yCAAM;IACN,6CAAQ;AACZ,CAAC,EARW,OAAO,GAAP,eAAO,KAAP,eAAO,QAQlB;AAED,IAAY,IAKX;AALD,WAAY,IAAI;IACZ,qCAAO;IAAE,qCAAO;IAAE,+BAAI;IACtB,iCAAK;IAAE,6BAAG;IAAE,+BAAI;IAChB,qCAAO;IAAE,+BAAI;IAAE,yCAAS;IACxB,qCAAO;IAAE,wCAAQ;IAAE,wCAAQ;AAC/B,CAAC,EALW,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAKf;AA4BD,wBAA+B,CAAO;IAClC,MAAM,CAAC;QACH,OAAO,EAAE,CAAC,CAAC,UAAU,EAAE;QACvB,MAAM,EAAE,CAAC,CAAC,UAAU,EAAE;QACtB,KAAK,EAAE,CAAC,CAAC,QAAQ,EAAE;QACnB,WAAW,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,GAAC,CAAC;QAC/B,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE;QACrB,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE;QAClB,KAAK,EAAE,CAAC,CAAC,WAAW,EAAE;KACzB,CAAC;AACN,CAAC;AAVD,wCAUC;AAGD;IAAqC,mCAA0D;IAA/F;;IAyCA,CAAC;IAtCG,6BAAG,GAAH,UAAI,CAAkB;QAClB,2BAA2B;QAC3B,IAAI,CAAC,GAAG,4BAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAClD,IAAI,GAAG,GAAG,4BAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,GAAG,4BAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAChD,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC;QAC/B,IAAI,GAAG,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;QACpC,IAAI,EAAE,GAAG,4BAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACpD,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;QACxB,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;QACjC,IAAI,GAAG,GAAG,4BAAmB,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAEnC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,OAAO,EAAE,MAAM,CAAI,CAAC,SAAI,GAAG,SAAI,CAAG,CAAC;YACxC,KAAK,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC;YAC/B,KAAK,UAAU,EAAE,MAAM,CAAC,EAAE,CAAC;YAC3B,KAAK,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC;YAC9B,KAAK,YAAY,EAAE,MAAM,CAAC,GAAG,CAAC;YAC9B,KAAK,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;YACvB,KAAK,MAAM,EAAE,MAAM,CAAI,EAAE,SAAI,GAAG,SAAI,CAAG,CAAC;YACxC,KAAK,YAAY,EAAE,MAAM,CAAI,GAAG,SAAI,EAAE,SAAI,GAAG,SAAI,CAAG;QACxD,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,gCAAM,GAAN,UAAO,CAAkB;QACrB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IACD,wCAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC;IACD,8CAAoB,GAApB;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAChE,CAAC;IACD,2CAAiB,GAAjB;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC;IAEL,sBAAC;AAAD,CAAC,CAzCoC,SAAS,GAyC7C;AAzCY,0CAAe;AA2C5B;IACI,MAAM,CAAC,IAAI,eAAe,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,EAAE,cAAc,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;AACnE,CAAC;AAFD,kDAEC;AAED,mBAA0B,CAAkB;IACxC,MAAM,CAAC,IAAI,eAAe,CAAC,WAAC,IAAI,QAAC,EAAD,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1C,CAAC;AAFD,8BAEC;AAgBD;IAAA;IA2CA,CAAC;IAzCG,kCAAU,GAAV,UACI,CAA0D,EAC1D,CAAqB;QAErB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,QAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAV,CAAU,CAAC,CAAC;IAC/C,CAAC;IAGD,8BAAM,GAAN,UAAU,CAAqB,EAAE,KAAa;QAC1C,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,8BAAM,GAAN,UAAU,CAAqB;QAC3B,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;IAC5B,CAAC;IAED,gCAAQ,GAAR,UAAe,CAAqB,EAAE,CAAc;QAChD,IAAI,CAAC,GAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,UAAU,CAAC,UAAC,CAAC,EAAE,CAAC;YACjB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC;IACjE,CAAC;IACD,iCAAS,GAAT,UAAa,CAAqB,EAAE,MAAS,EAAE,EAAqB;QAChE,IAAI,CAAC,GAAM,MAAM,CAAC;QAClB,IAAI,CAAC,UAAU,CAAC,UAAC,CAAC,EAAE,CAAC;YACjB,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IACD,oCAAY,GAAZ,UAAgB,CAAqB,EAAE,CAAI;QACvC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC;IAED,oCAAY,GAAZ,UAAgB,CAAqB;QACjC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAChE,CAAC;QACD,MAAM,CAAI,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;IAC9B,CAAC;IAEL,oBAAC;AAAD,CAAC;AA3CY,sCAAa;AA6C1B,IAAM,cAAc,GAAG,IAAI,aAAa,EAAE,CAAC;AAI3C,8BAA8B;AAC9B,iCAAkD,IAAqB;IAEnE,MAAM,CAAC,CACH,UAAC,CAAuB;QACpB,IAAI,CAAC,GAAU,IAAI,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACnC,cAAc,CAAC,UAAU,CAAC,UAAC,CAAC,EAAE,CAAC;YAC3B,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;AACX,CAAC;AAVD,0DAUC;AAID,yDAAyD;AACzD;IACY,oCAAuE;IAC/E,0BAAY,IAA0B;eAClC,kBAAM,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,EAAE,IAAI,CAAC;IACzB,CAAC;IACD,8BAAG,GAAH,UAAI,CAAmB;QACnB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC/C,KAAK,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACxD,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,yCAAc,GAAd;QACI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;IAC3C,CAAC;IACD,qCAAU,GAAV,UACI,CAAiD;QAEjD,cAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC;IACD,mCAAQ,GAAR,UAAY,CAAgB;QACxB,MAAM,CAAC,IAAI,gBAAgB,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC;IACD,oCAAS,GAAT,UAAU,MAAW,EAAE,EAA2B;QAC9C,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAC3D,CAAC;IACD,iCAAM,GAAN,UAAO,KAAa;QAChB,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;IACD,iCAAM,GAAN;QACI,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC;IACD,kCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;IACL,uBAAC;AAAD,CAAC,CAlCW,SAAS,GAkCpB;AAnCY,4CAAgB;AAqC7B,+BAA2C,CAAqB;IAE5D,MAAM,CAAC,IAAI,gBAAgB,CAAC;QACxB,MAAM,EAAE,CAAC,CAAC,MAAM;QAChB,OAAO,EAAE,CAAC;KACb,CAAC,CAAC;AACP,CAAC;AAND,sDAMC;AAED,oDAAoD;AACpD,gCAAgC;AAChC,8EAA8E;AAC9E;IACY,2BAAuE;IAE/E,iBACc,WAA4B,EACtC,IAA4E;QAA5E,gCAA+B,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE;QAFhF,YAGI,kBAAM,uBAAuB,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,SACpD;QAHa,iBAAW,GAAX,WAAW,CAAiB;;IAG1C,CAAC;IAED,qBAAG,GAAH,UAAI,CAAmB;QACnB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC/C,KAAK,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACxD,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,gCAAc,GAAd;QACI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;IAC3C,CAAC;IAES,8BAAY,GAAtB,UACI,CAAiD;QAEjD,cAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,4BAAU,GAAV,UACI,CAAoC;QADxC,iBAIC;QADG,IAAI,CAAC,YAAY,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,QAAC,CAAC,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAzB,CAAyB,CAAC,CAAC;IAC9D,CAAC;IACD,0BAAQ,GAAR,UAAS,CAAS;QACd,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,wBAAM,GAAN,UAAO,CAAS;QACZ,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,wBAAM,GAAN;QACI,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC;IACD,yBAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;IACD,8BAAY,GAAZ,UAAa,CAAM;QACf,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,8BAAY,GAAZ;QACI,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;IACL,cAAC;AAAD,CAAC,CAjDW,SAAS,GAiDpB;AAlDY,0BAAO;AAoDpB,0BAA2C,WAA4B;IACnE,MAAM,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC;AACpC,CAAC;AAFD,4CAEC;AAiBD,0DAA0D;AAC1D;IAAA;IAwFA,CAAC;IAtFG,gCAAU,GAAV,UACI,CAA4D,EAC5D,CAAmB;QAEnB,GAAG,CAAC,CAAC,IAAI,GAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACpB,CAAC,CAAC,GAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;IACL,CAAC;IAGD,4BAAM,GAAN,UAAU,CAAmB,EAAE,GAAW;QACtC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IACD,8BAAQ,GAAR,UAAY,CAAmB,EAAE,GAAW;QACxC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;QAAA,CAAC;IAClB,CAAC;IACD,2BAAK,GAAL,UAAS,CAAmB;QACxB,IAAI,GAAG,GAAQ,EAAE,CAAC;QAClB,IAAI,CAAC,UAAU,CAAC,UAAC,CAAC,EAAE,CAAC;YACjB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IACD,6BAAO,GAAP,UAAW,CAAmB;QAC1B,IAAI,GAAG,GAAa,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,UAAC,CAAC,EAAE,CAAC;YACjB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAED,4BAAM,GAAN,UAAU,CAAmB;QACzB,IAAI,CAAC,GAAW,CAAC,CAAC;QAClB,IAAI,CAAC,UAAU,CAAC,UAAC,CAAC,EAAE,CAAC;YACjB,CAAC,EAAE,CAAC;QACR,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAED,8BAAQ,GAAR,UAAe,CAAmB,EAAE,CAAc;QAC9C,IAAI,CAAC,GACC,EAAE,CAAC;QACT,IAAI,CAAC,UAAU,CAAC,UAAC,CAAC,EAAE,CAAC;YACjB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC;IAC7C,CAAC;IAED,oDAA8B,GAA9B,UAAqC,CAAmB,EAAE,CAA2B;QACjF,IAAI,CAAC,GAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,UAAU,CAAC,UAAC,CAAC,EAAE,CAAC;YACjB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAED,kCAAY,GAAZ,UAAgB,CAAmB;QAC/B,sBAAsB;QACtB,GAAG,CAAC,CAAC,IAAI,GAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,GAAC,CAAC;QACb,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAChE,CAAC;IAED,gDAA0B,GAA1B,UAA8B,CAAmB,EAAE,IAAuB;QACtE,sBAAsB;QACtB,GAAG,CAAC,CAAC,IAAI,GAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACpB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,GAAC,CAAC;YACb,CAAC;QACL,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;IAC9E,CAAC;IAGD,6BAAO,GAAP,UAAW,CAAmB,EAAE,GAAW,EAAE,CAAI;QAC7C,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IAED,6BAAO,GAAP,UAAW,CAAmB,EAAE,GAAW;QACvC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAEL,kBAAC;AAAD,CAAC;AAxFY,kCAAW;AA0FxB,IAAM,YAAY,GAAG,IAAI,WAAW,EAAE,CAAC;AAEvC,8BAA8B;AAC9B,+BAAgD,IAAqB;IAEjE,MAAM,CAAC,CACH,UAAC,CAAqB;QAClB,IAAI,CAAC,GAA2B,EAAE,CAAC;QACnC,YAAY,CAAC,UAAU,CAAC,UAAC,CAAC,EAAE,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;AACX,CAAC;AAVD,sDAUC;AAGD,uDAAuD;AACvD;IACY,kCAAiE;IACzE,wBAAY,IAAwB;eAChC,kBAAM,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,EAAE,IAAI,CAAC;IACzB,CAAC;IACD,4BAAG,GAAH,UAAI,CAAiB;QACjB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC/C,KAAK,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;YACjD,KAAK,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;YACjF,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACtC,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,uCAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IACD,mCAAU,GAAV,UACI,CAAgE;QAEhE,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,+BAAM,GAAN,UAAO,GAAW;QACd,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;IAC/C,CAAC;IACD,iCAAQ,GAAR,UAAS,GAAW;QAChB,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC;IACD,8BAAK,GAAL;QACI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC;IACD,gCAAO,GAAP;QACI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;IACD,+BAAM,GAAN;QACI,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,qCAAY,GAAZ;QACI,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAChD,CAAC;IACD,mDAA0B,GAA1B,UAA2B,IAAyB;QAChD,MAAM,CAAC,YAAY,CAAC,0BAA0B,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;IACpE,CAAC;IAED,oCAAW,GAAX,UAAe,CAAiB;QAC5B,MAAM,CAAC,IAAI,cAAc,CACrB,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CACtC,CAAC;IACN,CAAC;IACL,qBAAC;AAAD,CAAC,CAhDW,SAAS,GAgDpB;AAjDY,wCAAc;AAmD3B,6BAAyC,CAAqB;IAE1D,MAAM,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC;AAHD,kDAGC;AAED,kDAAkD;AAClD,gCAAgC;AAChC,+EAA+E;AAC/E;IACY,yBAAiE;IAEzE,eAAsB,WAA4B,EAAE,IAAwB;QAA5E,YACI,kBAAM,qBAAqB,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,SAClD;QAFqB,iBAAW,GAAX,WAAW,CAAiB;;IAElD,CAAC;IAED,mBAAG,GAAH,UAAI,CAAiB;QACjB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC/C,KAAK,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;YACjD,KAAK,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC9E,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACtC,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,8BAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IACS,4BAAY,GAAtB,UACI,CAAgE;QAEhE,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,0BAAU,GAAV,UACI,CAAkC;QADtC,iBAKC;QAFG,IAAI,CAAC,YAAY,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,QAAC,CAAC,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAzB,CAAyB,CAAC;QACzD,0EAA0E;IAC9E,CAAC;IACD,wBAAQ,GAAR,UAAS,GAAW;QAChB,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;IAC/C,CAAC;IAED,sBAAM,GAAN,UAAO,GAAW;QACd,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5C,wDAAwD;IAC5D,CAAC;IACD,wBAAQ,GAAR,UAAS,GAAW;QAChB,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC;IACS,uBAAO,GAAjB;QACI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC;IACD,qBAAK,GAAL;QAAA,iBAGC;QAFG,MAAM,CAAC,YAAY,CAAC,8BAA8B,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,YAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;QAC7F,kDAAkD;IACtD,CAAC;IACD,uBAAO,GAAP;QACI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;IACD,sBAAM,GAAN;QACI,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,uBAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;IACD,4BAAY,GAAZ;QACI,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAChD,CAAC;IACS,4CAA4B,GAAtC,UAAuC,IAAyB;QAC5D,MAAM,CAAC,YAAY,CAAC,0BAA0B,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;IACpE,CAAC;IACD,0CAA0B,GAA1B,UAA2B,IAAyB;QAApD,iBAGC;QAFG,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,WAAC,IAAI,WAAI,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAzB,CAAyB,CAAC,CAAC;QACzE,6EAA6E;IACjF,CAAC;IACD,uBAAO,GAAP,UAAQ,GAAW,EAAE,CAAM;QACvB,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC;IACD,uBAAO,GAAP,UAAQ,GAAW;QACf,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;IACzC,CAAC;IACL,YAAC;AAAD,CAAC,CAxEW,SAAS,GAwEpB;AAzEY,sBAAK;AA2ElB,wBAAyC,WAA4B;IACjE,MAAM,CAAC,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;AACtE,CAAC;AAFD,wCAEC;AA2BD;IAGI,mCAAoB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAC/B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IACtB,CAAC;IACD,8CAAU,GAAV,UAAW,CAAQ;QACf,IAAI,EAAE,GAAW,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9C,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACnC,CAAC;IAEL,gCAAC;AAAD,CAAC;AAZY,8DAAyB;AActC,wCAEM,OAAe;IAEjB,MAAM,CAAC,IAAI,yBAAyB,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC;AALD,wEAKC;AAED,0BACI,CAAQ,EAAE,GAAW;IAErB,MAAM,CAAC;QACH,GAAG,EAAE,GAAG;QACR,KAAK,EAAE,CAAC;KACX,CAAC;AACN,CAAC;AAPD,4CAOC;AAED;;;EAGE;AACF;IACY,uCAAiE;IAGzE,6BACI,KAAY,EACZ,WAA4B,EAC5B,GAAuC;QAAvC,8BAA4B,KAAK,EAAE,EAAE,EAAE;QAH3C,YAII,kBAAM,qBAAqB,CAAC,WAAW,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,SAGvF;QAFG,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;IACnC,CAAC;IAED,iCAAG,GAAH,UAAI,CAAiB;QACjB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC/C,KAAK,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;YACrF,KAAK,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;YACjF,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,4CAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAES,0CAAY,GAAtB,UACI,CAAiF;QADrF,iBAIC;QADG,YAAY,CAAC,UAAU,CAAC,UAAC,EAAE,EAAE,CAAC,EAAE,CAAC,IAAK,QAAC,CAAC,gBAAgB,CAAC,KAAI,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAzC,CAAyC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAChG,CAAC;IACD,wCAAU,GAAV,UACI,CAAmD;QADvD,iBAKC;QAFG,IAAI,CAAC,YAAY,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,QAAC,CAAC,CAAC,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAzB,CAAyB,CAAC;QACzD,0EAA0E;IAC9E,CAAC;IAES,sCAAQ,GAAlB,UAAmB,QAA4B;QAC3C,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;IACxD,CAAC;IAED,oCAAM,GAAN,UAAO,QAA4B;QAC/B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrD,CAAC;IACD,sCAAQ,GAAR,UAAS,QAA4B;QACjC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC1D,CAAC;IACS,qCAAO,GAAjB;QACI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC;IACD,mCAAK,GAAL;QAAA,iBAGC;QAFG,MAAM,CAAC,YAAY,CAAC,8BAA8B,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,YAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;QAC7F,kDAAkD;IACtD,CAAC;IAGD,qCAAO,GAAP;QAAA,iBAIC;QAHG,MAAM,CAAC,YAAY,CAAC,8BAA8B,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,uBAAgB,CAAC,KAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAA/B,CAA+B,CAAC,CAAC;QACzG,2DAA2D;QAC3D,2DAA2D;IAC/D,CAAC;IACD,0CAAY,GAAZ;QACI,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAG,CAAC;IAChF,CAAC;IACS,0DAA4B,GAAtC,UAAuC,IAAyB;QAC5D,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,0BAA0B,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;IAClG,CAAC;IAED,wDAA0B,GAA1B,UAA2B,IAAyB;QAApD,iBAGC;QAFG,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,WAAC,IAAI,WAAI,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAzB,CAAyB,CAAC,CAAC;QACzE,6EAA6E;IACjF,CAAC;IAED,oCAAM,GAAN;QACI,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,qCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;IAGD,qCAAO,GAAP,UAAQ,QAA4B,EAAE,CAAM;QACxC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,qCAAO,GAAP,UAAQ,QAA4B;QAChC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;IAClD,CAAC;IACL,0BAAC;AAAD,CAAC,CAxFW,SAAS,GAwFpB;AAzFY,kDAAmB;AA0FhC,sCAEI,KAAY,EACZ,WAA4B;IAC5B,MAAM,CAAC,IAAI,mBAAmB,CAC1B,KAAK,EAAE,WAAW,CAAC,CAAC;AAC5B,CAAC;AAND,oEAMC;AAED,kCAEI,KAAY,EACZ,WAA4B,EAC5B,GAAuB;IAEvB,MAAM,CAAC,IAAI,mBAAmB,CAC1B,KAAK,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;AACjC,CAAC;AARD,4DAQC;AAED,oBAAoB;AACpB;IACY,gDAAiE;IAEzE,sCACI,KAAY,EACZ,GAAuC;QAAvC,8BAA4B,KAAK,EAAE,EAAE,EAAE;QAF3C,YAGI,kBAAM,qBAAqB,CAAC,UAAC,CAAC,IAAK,QAAC,EAAD,CAAC,CAAC,EAAE,GAAG,CAAC,SAE9C;QADG,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;IACvB,CAAC;IAED,0CAAG,GAAH,UAAI,CAAiB;QACjB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACR,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC/C,KAAK,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;YACrF,KAAK,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAK,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;YACjF,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,qDAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAED,iDAAU,GAAV,UACI,CAAiF;QADrF,iBAIC;QADG,YAAY,CAAC,UAAU,CAAC,UAAC,EAAE,EAAE,CAAC,EAAE,CAAC,IAAK,QAAC,CAAC,gBAAgB,CAAC,KAAI,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAzC,CAAyC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAChG,CAAC;IAED,6CAAM,GAAN,UAAO,QAA4B;QAC/B,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;IACxD,CAAC;IAED,+CAAQ,GAAR,UAAS,QAA4B;QACjC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC1D,CAAC;IACD,4CAAK,GAAL;QACI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC;IACD,8CAAO,GAAP;QAAA,iBAEC;QADG,MAAM,CAAC,YAAY,CAAC,8BAA8B,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,uBAAgB,CAAC,KAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAA/B,CAA+B,CAAC,CAAC;IAC7G,CAAC;IACD,mDAAY,GAAZ;QACI,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC9E,CAAC;IACD,iEAA0B,GAA1B,UAA2B,IAAyB;QAChD,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,0BAA0B,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;IAClG,CAAC;IAED,6CAAM,GAAN;QACI,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,8CAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;IAEL,mCAAC;AAAD,CAAC,CAvDW,SAAS,GAuDpB;AAxDY,oEAA4B;AAyDzC,+CAC+B,KAAY;IAEvC,MAAM,CAAC,IAAI,4BAA4B,CAAa,KAAK,CAAC,CAAC;AAC/D,CAAC;AAJD,sFAIC;AAED,2CAC+B,KAAY,EAAE,GAAuB;IAEhE,MAAM,CAAC,IAAI,4BAA4B,CAAa,KAAK,EAAE,GAAG,CAAC,CAAC;AACpE,CAAC;AAJD,8EAIC;;;;;;;;;;;AC11BD,gBAAuB,CAAQ;IAC3B,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,CAAC,CAAC,CAAC;AAClD,CAAC;AAFD,wBAEC;AAED,6BAAoC,CAAU,EAAE,MAAe;IAC3D,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IACrB,OAAM,CAAC,CAAC,MAAM,GAAG,MAAM,EAAC,CAAC;QACrB,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;IAChB,CAAC;IACD,MAAM,CAAC,CAAC,CAAC;AACb,CAAC;AAND,kDAMC","file":"jeu1.client.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 248);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap be94ec5a8928510c3165","import {\n    FormatMessage, Message,\n    FormatErreurRedhibitoire, ErreurRedhibitoire,\n    FormatConfigurationInitiale, Configuration\n} from \"./communication\";\n\nexport class CanalClient<\n    FE extends FormatErreurRedhibitoire, FC extends FormatConfigurationInitiale, // Format d'entrée\n    FMIN extends FMOUT, FMOUT extends FormatMessage, // Formats d'entrée et de sortie\n    EM extends string\n    > {\n    adresse: string;\n    lienServeur: WebSocket;\n    constructor(adresse: string) {\n        this.adresse = adresse;\n        this.lienServeur = new WebSocket('ws://' + this.adresse, 'echo-protocol');\n    };\n\n    // Effet : send(String)\n    envoyerMessage(msg: Message<FMIN, FMOUT, EM>): void {\n        this.lienServeur.send(msg.brut());\n    };\n\n    // Effet: enregistrement comme écouteur\n    enregistrerTraitementMessageRecu(traitement: (m: FMIN) => void): void {\n        this.lienServeur.addEventListener(\"message\", function (e: MessageEvent) {\n            let msg = JSON.parse(e.data);\n            if (msg.configurationInitiale !== undefined) {\n                return;\n            }\n            if (msg.erreurRedhibitoire !== undefined) {\n                return;\n            }\n            traitement(<FMIN>msg);\n        });\n    };\n    // Effet: enregistrement comme écouteur\n    enregistrerTraitementConfigurationRecue(traitement: (c: FC) => void): void {\n        this.lienServeur.addEventListener(\"message\", function (e: MessageEvent) {\n            let contenuJSON = JSON.parse(e.data);\n            if (contenuJSON.configurationInitiale === undefined) {\n                return;\n            }\n            traitement(<FC>contenuJSON);\n        });\n    };\n    // Effet: enregistrement comme écouteur\n    enregistrerTraitementErreurRecue(traitement: (e: FE) => void): void {\n        this.lienServeur.addEventListener(\"message\", function (e: MessageEvent) {\n            let contenuJSON = JSON.parse(e.data);\n            if (contenuJSON.erreurRedhibitoire === undefined) {\n                return;\n            }\n            traitement(<FE>contenuJSON);\n        });\n    };\n\n};\n\nexport function creerCanalClient<\n    FE extends FormatErreurRedhibitoire, FC extends FormatConfigurationInitiale,\n    FMIN extends FMOUT,\n    FMOUT extends FormatMessage, EM extends string\n    >(adresse: string) {\n    return new CanalClient<FE, FC, FMIN, FMOUT, EM>(adresse);\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./bibliotheque/client.ts","import {\n    Unite,\n    FormatIdentifiableIN, FormatIdentifiableEX, Identifiant,\n    Enveloppe,\n    Tableau, creerTableauVide,\n    TableIdentification, creerTableIdentification,\n    FormatTableIN,\n    FormatTableEX, conversionFormatTable,\n    TableIdentificationImmutable, creerTableIdentificationImmutable\n} from \"./types\"\n\n\n\n// Cette interface pourrait être complétée à l'avenir.\nexport interface FormatConfigurationInitiale {\n    readonly \"configurationInitiale\": Unite\n};\n// Cette interface pourrait être complétée à l'avenir.\nexport interface FormatErreurRedhibitoire {\n    readonly \"erreurRedhibitoire\": Unite\n}\n// Cette interface pourrait être complétée à l'avenir.\n// Clés \"configurationInitiale\" et \"erreurRedhibitoire\" interdites dans les messages\nexport interface FormatMessage { }\n\nexport abstract class Message<\n    FMIN extends FormatMessage,\n    FMEX extends FormatMessage,\n    EM extends string\n    >\n    extends Enveloppe<FMIN, FMEX, EM> {\n\n}\n\nexport abstract class Configuration<\n    FCIN extends FormatConfigurationInitiale,\n    FCEX extends FormatConfigurationInitiale,\n    EC extends string\n    >\n    extends Enveloppe<FCIN, FCEX, EC> {\n\n}\n\nexport abstract class ErreurRedhibitoire<\n    FEIN extends FormatErreurRedhibitoire,\n    FEEX extends FormatErreurRedhibitoire,\n    EE extends string\n    >\n    extends Enveloppe<FEIN, FEEX, EE> {\n\n}\n\n\n/*\n- réseau ::= noeud*\n- noeud ::= (sommet, sommet*)\n- sommet ::= {identifiant, ...}\n\n- Serveur : agrégation d'un réseau\n- Client : agrégation d'un noeud du réseau \n\n- Remarque : compatibilité ES3 pour les objets.\n*/\n\n\n// - sommet ::= {identifiant, ...}\n\n// La sorte pour les identifiants de sommets est 'sommet'. \nexport abstract class Sommet<\n    SIN extends FormatIdentifiableEX<'sommet'>,\n    SEX extends FormatIdentifiableEX<'sommet'>,\n    E extends string\n    >\n    extends Enveloppe<SIN, SEX, E> {\n\n}\n\n\n// - réseau ::= noeud*\n\n// Hypothèse : le réseau ne modifie ni les sommets ni les neouds. \n//   Conséquence : un seul format est utilisé, pour les sommets et pour les noeuds respectivement.\n\n\nexport interface ReseauImmutable<S extends FormatIdentifiableEX<'sommet'>> {\n    representation(): string;\n    possedeNoeud(ID_sommet: Identifiant<'sommet'>): boolean;\n    sontVoisins(ID_sommet1: Identifiant<'sommet'>, ID_sommet2: Identifiant<'sommet'>): boolean;\n    pourChaqueNoeud(f: (id: Identifiant<'sommet'>, n: FormatNoeudEX<S>) => void): void;\n    noeud(ID_sommet: Identifiant<'sommet'>): FormatNoeudEX<S>;\n    identifiantsNoeuds(): Identifiant<'sommet'>[];\n    selectionNoeud(): Identifiant<'sommet'>;\n}\n\n\nexport interface ReseauMutable<S extends FormatIdentifiableEX<'sommet'>> extends\n    ReseauImmutable<S> {\n    ajouterNoeud(n: FormatNoeudEX<S>): void;\n    retirerNoeud(n: FormatNoeudEX<S>): void;\n}\n\nexport class ReseauTableDeNoeuds<S extends FormatIdentifiableEX<'sommet'>>\n    extends TableIdentification<'sommet', FormatNoeudEX<S>, FormatNoeudEX<S>>\n    implements ReseauMutable<S> {\n\n    constructor() {\n        super('sommet', (x) => x);\n    }\n\n    representation(): string {\n        return \"réseau de \" + this.net('taille') + \" noeuds : \"\n            + this.net('graphe');\n    }\n    // (simple renommmage)\n    possedeNoeud(ID_sommet: Identifiant<'sommet'>): boolean {\n        return this.contient(ID_sommet);\n    }\n    // Précondition : id1 et id2 sont deux noeuds du réseau.\n    sontVoisins(ID_sommet1: Identifiant<'sommet'>, ID_sommet2: Identifiant<'sommet'>): boolean {\n        return creerTableIdentificationImmutable('sommet', this.valeurIN(ID_sommet1).voisins).\n            contient(ID_sommet2);\n    }\n    pourChaqueNoeud(f: (id: Identifiant<'sommet'>, n: FormatNoeudEX<S>) => void) {\n        this.pourChaqueIn(f);\n    }\n    noeud(ID_sommet: Identifiant<'sommet'>): FormatNoeudEX<S> {\n        return this.valeur(ID_sommet);\n    }\n    identifiantsNoeuds(): Identifiant<'sommet'>[] {\n        return this.domaine();\n    }\n    selectionNoeud() {\n        return this.selectionCle();\n    }\n    ajouterNoeud(n: FormatNoeudEX<S>): void {\n        this.ajouter(n.centre.ID, n);\n    }\n    retirerNoeud(n: FormatNoeudEX<S>): void {\n        this.retirer(n.centre.ID);\n    }\n}\n\nexport function creerReseauVide<\n    S extends FormatIdentifiableEX<'sommet'>\n    >(): ReseauMutable<S> {\n    return new ReseauTableDeNoeuds();\n}\n\n// - noeud ::= (sommet, sommet*)\n// Hypothèse : un noeud ne modifie pas les sommets.\n//    Conséquence : un seul format (sortie) est utilisé pour les sommets.\nexport interface FormatNoeudIN<S extends FormatIdentifiableEX<'sommet'>> {\n    readonly centre: S;\n    readonly voisins: FormatTableIN<S>\n}\n\nexport interface FormatNoeudEX<S extends FormatIdentifiableEX<'sommet'>> {\n    readonly centre: S;\n    readonly voisins: FormatTableEX<S>\n}\n\nfunction conversionFormatNoeud<S extends FormatIdentifiableEX<'sommet'>>(\n    n: FormatNoeudIN<S>): FormatNoeudEX<S> {\n    return { centre: n.centre, voisins: conversionFormatTable<S, S>((s) => s)(n.voisins) };\n}\n\nexport type EtiquetteNoeud = 'centre' | 'voisins';\n\n\nexport interface NoeudImmutable<S extends FormatIdentifiableEX<'sommet'>> {\n    aPourVoisin(ID_sommet: Identifiant<'sommet'>): boolean;\n    pourChaqueVoisin(proc: (ID_sommet: Identifiant<'sommet'>, v: S) => void): void;\n    ex() : FormatNoeudEX<S>\n}\n\nexport interface NoeudMutable<S extends FormatIdentifiableEX<'sommet'>>\n    extends NoeudImmutable<S> {\n    ajouterVoisin(v: S): void;\n}\n\n\nexport abstract class NoeudIN<S extends FormatIdentifiableEX<'sommet'>>\n    extends Enveloppe<FormatNoeudIN<S>, FormatNoeudEX<S>, EtiquetteNoeud>\n    implements NoeudMutable<S> {\n\n    constructor(etat: FormatNoeudIN<S>) {\n        super(conversionFormatNoeud, etat);\n    }\n\n    aPourVoisin(ID_sommet: Identifiant<'sommet'>): boolean {\n        return creerTableIdentificationImmutable('sommet', this.in().voisins).\n            contient(ID_sommet);\n    }\n    pourChaqueVoisin(proc: (ID_sommet: Identifiant<'sommet'>, v: S) => void) {\n        creerTableIdentificationImmutable('sommet', this.in().voisins).pourChaque(proc);\n    }\n\n    ajouterVoisin(v: S): void {\n        return creerTableIdentification('sommet', x => x, this.in().voisins)\n            .ajouter(v.ID, v);\n    }\n\n}\n\nexport abstract class NoeudEX<S extends FormatIdentifiableEX<'sommet'>>\n    extends Enveloppe<FormatNoeudEX<S>, FormatNoeudEX<S>, EtiquetteNoeud>\n    implements NoeudImmutable<S> {\n\n    constructor(etat: FormatNoeudEX<S>) {\n        super(conversionFormatNoeud, etat);\n    }\n\n    aPourVoisin(ID_sommet: Identifiant<'sommet'>): boolean {\n        return creerTableIdentificationImmutable('sommet', this.in().voisins).\n            contient(ID_sommet);\n    }\n    pourChaqueVoisin(proc: (ID_sommet: Identifiant<'sommet'>, v: S) => void) {\n        creerTableIdentificationImmutable('sommet', this.in().voisins).pourChaque(proc);\n    }\n\n}\n\nexport interface AssemblageReseau<S extends FormatIdentifiableEX<'sommet'>> {\n    ajouterSommet(s: S): void;\n    assembler(): ReseauMutable<S>;\n}\n\nclass AssemblageReseauEnAnneau<S extends FormatIdentifiableEX<'sommet'>>\n    extends Tableau<S, S>\n    implements AssemblageReseau<S> {\n\n    constructor(\n        private nombreSommets: number,\n        private fabriqueNoeud: (n: FormatNoeudIN<S>) => NoeudIN<S>\n    ) {\n        super(x => x)\n        console.log(\"* Construction d'un réseau en anneau de \" + nombreSommets.toString() + \" éléments.\");\n    }\n    // Les sommetts doivent avoir des identifiants deux à deux distincts.\n    ajouterSommet(s: S): void {\n        if (this.taille() < this.nombreSommets) {\n            this.ajouterEnFin(s);\n        } else {\n            console.log(\"- Impossible d'ajouter un sommet : le réseau en anneau est complet.\");\n        }\n    }\n\n    assembler(): ReseauMutable<S> {\n        let restant = this.nombreSommets - this.taille();\n        if (restant > 0) {\n            console.log(\"- Impossible d'assembler un réseau en anneau de la taille donnée : ajouter \" + restant + \" sommets.\");\n            throw new Error(\"[Exception : AssemblageReseau.assembler non défini.]\")\n        }\n        // Définition du réseau\n        let reseau: ReseauMutable<S> = creerReseauVide();\n        this.pourChaque((i: number, s: S) => {\n            let n: NoeudIN<S> = this.fabriqueNoeud({ centre: s, voisins: { table: {}, mutable: Unite.ZERO } });\n            n.ajouterVoisin(this.valeurIn((i + 1) % this.nombreSommets));\n            n.ajouterVoisin(this.valeurIn((i + (this.nombreSommets - 1)) % this.nombreSommets));\n            reseau.ajouterNoeud(n.ex());\n        });\n        return reseau;\n    }\n}\n\nexport function creerAssemblageReseauEnAnneau<SO extends FormatIdentifiableEX<'sommet'>>(\n    taille: number,\n    fabriqueNoeud: (n: FormatNoeudIN<SO>) => NoeudIN<SO>)\n    : AssemblageReseau<SO> {\n    return new AssemblageReseauEnAnneau<SO>(taille, fabriqueNoeud);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./bibliotheque/communication.ts","function recupererElementHTML(id : string) : HTMLElement{\n    let r = document.getElementById(id); \n    if(typeof r === \"undefined\"){\n        throw new Error(`[Erreur : elementParId(${id}) non défini.]`);\n    }\n    return <HTMLElement>r;\n}\n\nexport function elementParId(id : string) : HTMLElement {\n    return recupererElementHTML(id);\n}\n\nexport function entreeParId(id : string) : HTMLInputElement {\n    return <HTMLInputElement>recupererElementHTML(id);\n}\n\nexport function recupererEntree(id : string) : string {\n    return entreeParId(id).value;\n}\n\nexport function initialiserEntree(id : string, val : string) : void {\n    entreeParId(id).value = val;\n}\n\nexport function initialiserDocument(contenu : string){\n    document.write(contenu);\n}\n\nexport function contenuBalise(champ: string): string {\n    let r = recupererElementHTML(champ);\n    return r.innerHTML;\n}\n\nexport function poster(id : string, val: string): void {\n    let r = recupererElementHTML(id);\n    r.innerHTML += val;\n}\n\nexport function posterNL(id: string, val: string): void {\n    poster(id, val + \"<br>\");\n}\n\nexport function gererEvenementDocument(type: string, gestionnaire: (e: Event) => void) {\n    console.log(\"- Document : enregistrement d'un gestionnaire pour l'événement \" + type);\n    document.addEventListener(type, <EventListenerOrEventListenerObject>gestionnaire);\n}\n\n\nexport function gererEvenementElement(id: string, type: string, gestionnaire: (e: Event) => void) {\n    let r = recupererElementHTML(id);\n    r.addEventListener(type, <EventListenerOrEventListenerObject>gestionnaire);\n}\n\nexport function elementSaisieEnvoi(idSaisie : string, idBoutonEnvoi: string, msg : string) : string {\n    return '<input type=\"text\" id=\"' + idSaisie + '\">' \n        + '<input class=\"button\" type=\"button\" id=\"' + idBoutonEnvoi + '\" value=\"' + msg +'\" >';\n}\n\n\n// WEBPACK FOOTER //\n// ./bibliotheque/vueClient.ts","import { \n    Identifiant,\n    creerTableImmutable\n } from \"../../bibliotheque/types\";\nimport {\n} from \"../../bibliotheque/communication\";\nimport {\n    elementParId, recupererEntree, initialiserEntree, contenuBalise, poster, posterNL,\n    gererEvenementDocument, gererEvenementElement,\n    elementSaisieEnvoi, initialiserDocument\n} from \"../../bibliotheque/vueClient\";\nimport { CanalClient, creerCanalClient } from \"../../bibliotheque/client\";\nimport {\n    hote, port2,\n    NoeudJeu1EX, creerNoeudJeu1EX,\n    SommetJeu1, FormatSommetJeu1EX, creerSommetJeu1,\n    FormatMessageJeu1EX, EtiquetteMessageJeu1, MessageJeu1,\n    FormatConfigurationJeu1EX, EtiquetteConfigurationJeu1, creerConfigurationJeu1,\n        decomposerConfiguration,        \n    FormatErreurJeu1EX, EtiquetteErreurJeu1,\n    ErreurJeu1, creerErreurJeu1,\n    PopulationLocale, creerPopulationLocale, \n    Utilisateur, creerUtilisateur\n} from '../commun/jeu1_adressageRoutage';\n\n\nconsole.log(\"* Chargement du script\");\n\nconst adresseServeur: string = hote + \":\" + port2;\n\ntype CanalJeu1 = CanalClient<\n    FormatErreurJeu1EX, \n    FormatConfigurationJeu1EX, \n    FormatMessageJeu1EX, FormatMessageJeu1EX, EtiquetteMessageJeu1>;\n\n// A initialiser\nvar canal: CanalJeu1;\nvar noeud: NoeudJeu1EX;\nvar population : PopulationLocale;\nvar utilisateur : Utilisateur;\n\n\n\nfunction envoyerMessage(texte: string, destinataire: Identifiant<'sommet'>) {\n    /*\n    let msg: MessageJeu1 = creerMessageCommunication(noeud.centre().enJSON().id, destinataire, texte);\n    console.log(\"- Envoi du message brut : \" + msg.brut());\n    console.log(\"- Envoi du message net : \" + representerMessage(msg));\n    canal.envoyerMessage(msg);\n    */\n}\n\n// A exécuter après chargement de la page\n// - pas d'interruption de la fonction\nfunction initialisation(): void {\n    console.log(\"* Initialisation après chargement du DOM\");\n\n    console.log(\"- du canal de communication avec le serveur d'adresse \" + adresseServeur);\n    canal = creerCanalClient(adresseServeur);\n\n    console.log(\"- du traitement des messages\");\n    canal.enregistrerTraitementMessageRecu((m: FormatMessageJeu1EX) => {\n        /*let msg = new MessageTchat(m);\n        console.log(\"* Réception\");\n        console.log(\"- du message brut : \" + msg.brut());\n        console.log(\"- du message net : \" + representerMessage(msg));\n        posterNL('logChats', representerMessage(msg));\n        */\n    });\n\n    console.log(\"- du traitement de la configuration\");\n    canal.enregistrerTraitementConfigurationRecue((c: FormatConfigurationJeu1EX) => {\n        let config = creerConfigurationJeu1(c);\n        console.log(\"* Réception\");\n        console.log(\"- de la configuration brute : \" + config.brut());\n        console.log(\"- de la configuration nette : \" + config.representation());\n        console.log(\"* Initialisation du noeud du réseau\");\n        let decConfig = decomposerConfiguration(config);\n        noeud = creerNoeudJeu1EX(decConfig[0]);\n        population = creerPopulationLocale(decConfig[1]);\n        utilisateur = creerUtilisateur(decConfig[2]);\n        voir();\n    });\n\n    console.log(\"- du traitement d'une erreur rédhibitoire\");\n    canal.enregistrerTraitementErreurRecue((err: FormatErreurJeu1EX) => {\n        let erreur = creerErreurJeu1(err);\n        console.log(\"* Réception\");\n        console.log(\"- de l'erreur rédhibitoire brute : \" + erreur.brut());\n        console.log(\"- de l'erreur rédhibitoire nette : \" + erreur.representation());\n        console.log(\"* Initialisation du document\");\n        initialiserDocument(erreur.representation());\n    });\n\n}\n\nfunction voir(): void {\n    console.log(\"* Consolidation de la vue\");\n    console.log(\"- adresse, domaine, domaines voisins, utilisateur, autres utilisateurs du domaine\");\n    poster(\"adresseServeur\", adresseServeur);\n    poster(\"centre\", creerSommetJeu1(noeud.ex().centre).representation());\n    poster(\"voisins\", creerTableImmutable(noeud.ex().voisins).representation());\n    poster(\"utilisateur\", utilisateur.representation());\n    poster(\"utilisateursDomaine\", population.representation());\n\n    /*\n    console.log(\"- formulaire\");\n    let voisinsNoeud = noeud.voisins();\n    let contenuFormulaire = \"\";\n    for (let idV in voisinsNoeud) {\n        poster(\"formulaire\", elementSaisieEnvoi(\"message_\" + idV, \"boutonEnvoi_\" + idV,\n            \"Envoyer un message à \" + representerSommet(voisinsNoeud[idV]) + \".\"));\n    }\n    let type = \"click\";\n    for (const idV in voisinsNoeud) {\n        console.log(\"- Element \" + idV + \" : enregistrement d'un gestionnaire pour l'événement \" + type);\n        gererEvenementElement(\"boutonEnvoi_\" + idV, type, e => {\n            let entree = recupererEntree(\"message_\" + idV);\n            initialiserEntree(\"message_\" + idV, \"\");\n            console.log(\"* Entree : \" + entree);\n            envoyerMessage(entree, ID(idV));\n        });\n    }\n    */\n    /*\n      <input type=\"text\" id=\"message_id1\"> \n      <input class=\"button\" type=\"button\" id=\"boutonEnvoi_id1\" value=\"Envoyer un message à {{nom id1}}.\"\n         onClick=\"envoyerMessage(this.form.message.value, \"id1\")\">\n    */\n\n}\n\n// Gestion des événements pour le document\nconsole.log(\"* Enregistrement de l'initialisation au chargement\");\ngererEvenementDocument('DOMContentLoaded', initialisation);\n/*\n<script type=\"text/javascript\">\n  document.addEventListener('DOMContentLoaded', initialisation());\n</script>\n\n*/\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./jeu1_adressageRoutage/client/clientJeu1_adressageRoutage.ts","import {\n    FormatMessage, Message,\n    FormatConfigurationInitiale, Configuration,\n    FormatErreurRedhibitoire, ErreurRedhibitoire,\n    Sommet, ReseauImmutable, AssemblageReseau,\n    NoeudIN, NoeudEX, NoeudImmutable, FormatNoeudEX, FormatNoeudIN, EtiquetteNoeud,\n    creerAssemblageReseauEnAnneau\n} from \"../../bibliotheque/communication\";\n\nimport {\n    Unite, Mutable,\n    creerDate, creerDateMaintenant, FormatDateFrEX,\n    creerTableImmutable, FormatTableEX, FormatTableIN,\n    TableIdentification,\n    FormatIdentifiableIN, FormatIdentifiableEX,\n    Identification, creerIdentificationParCompteur, Identifiant,\n    Enveloppe\n} from \"../../bibliotheque/types\";\n\nimport { jamais } from \"../../bibliotheque/outils\";\n\nimport { Mot } from \"../../bibliotheque/binaire\";\n\nexport const hote: string = \"merite\"; // hôte local via TCP/IP - DNS : cf. /etc/hosts - IP : 127.0.0.1\nexport const port1 = 3001; // port de la essource 1 (serveur d'applications)\nexport const port2: number = 1111; // port de la ressouce 2 (serveur de connexions)\n\n// Iditenfiants indéfinis utilisés dans des messages définis partiellement\nexport const sommetInconnu: Identifiant<'sommet'> = { val: \"INCONNU\", sorte: 'sommet' };\nexport const messageInconnu: Identifiant<'message'> = { val: \"INCONNU\", sorte: 'message' };\n\n\n// On choisit de ne pas placer la population du domaine dans le sommet pour éviter de\n//   découvrir la population des domaines voisins.\nexport interface FormatSommetJeu1EX extends FormatIdentifiableEX<'sommet'> {\n    readonly \"domaine\": Mot,\n}\n\nexport type EtiquetteSommetJeu1 = 'ID' | 'domaine';\n\nexport class SommetJeu1\n    extends Sommet<FormatSommetJeu1EX, FormatSommetJeu1EX, EtiquetteSommetJeu1> {\n\n    constructor(etat: FormatSommetJeu1EX) {\n        super((x) => x, etat);\n    }\n\n    net(e: EtiquetteSommetJeu1): string {\n        let s = this.ex();\n        switch (e) {\n            case 'domaine': return s.domaine.representation();\n            case 'ID': return s.ID.val;\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return this.net('domaine') + \" (\" + this.net('ID') + \")\";\n    }\n}\n\nexport function creerSommetJeu1(s: FormatSommetJeu1EX): SommetJeu1 {\n    return new SommetJeu1(s);\n}\n\nexport type FormatNoeudJeu1IN = FormatNoeudIN<FormatSommetJeu1EX>;\n\nexport class NoeudJeu1IN extends NoeudIN<FormatSommetJeu1EX>{\n\n    net(e: EtiquetteNoeud): string {\n        let s = this.ex();\n        switch (e) {\n            case 'centre': return creerSommetJeu1(s.centre).representation();\n            case 'voisins': return creerTableImmutable(s.voisins).representation();\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return \"(centre : \" + this.net('centre') + \" ; voisins : \" + this.net('voisins') + \")\";\n    }\n}\n\nexport function creerNoeudJeu1IN(n: FormatNoeudJeu1IN) {\n    return new NoeudJeu1IN(n);\n}\n\nexport type FormatNoeudJeu1EX = FormatNoeudEX<FormatSommetJeu1EX>;\nexport type NoudJeu1Immutable = NoeudImmutable<FormatSommetJeu1EX>;\n\nexport class NoeudJeu1EX extends NoeudEX<FormatSommetJeu1EX>{\n\n    net(e: EtiquetteNoeud): string {\n        let s = this.ex();\n        switch (e) {\n            case 'centre': return creerSommetJeu1(s.centre).representation();\n            case 'voisins': return creerTableImmutable(s.voisins).representation();\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return \"(centre : \" + this.net('centre') + \" ; voisins : \" + this.net('voisins') + \")\";\n    }\n}\n\nexport function creerNoeudJeu1EX(n: FormatNoeudJeu1EX) {\n    return new NoeudJeu1EX(n);\n}\n\nexport type ReseauJeu1 = ReseauImmutable<FormatSommetJeu1EX>;\n\nexport type AssemblageReseauJeu1\n    = AssemblageReseau<FormatSommetJeu1EX>;\n\n/*\nProtocole\nClient | Serveur\n1. Produire un message INIT | .\n2. Transmettre un message INIT pour TRANSIT | Identifier le message en TRANSIT.\n3. Transmettre un message TRANSIT pour TRANSIT | Accuser réception en TRANSIT (SUCCES ou ECHEC).\n4. Ignorer un message en TRANSIT (IGNOR) | .  \n5. Consulter un message en TRANSIT (FIN) | Accuser réception du message FIN (SUCCES ou ECHEC).\n*/\n\nexport enum AR {\n    SUCCES,\n    ECHEC\n}\n\nexport enum TypeMessageJeu1 {\n    INIT,\n    TRANSIT,\n    IGNOR,\n    FIN,\n    SUCCES_TRANSIT,\n    ECHEC_TRANSIT,\n    SUCCES_FIN,\n    ECHEC_FIN,\n    ERREUR_CONNEXION, // TODO\n    ERREUR_EMET,\n    ERREUR_DEST,\n    ERREUR_TYPE,\n    INTERDICTION\n}\n\n\n\nexport interface FormatMessageJeu1EX\n    extends FormatMessage, FormatIdentifiableEX<'message'> {\n    readonly \"ID_origine\": Identifiant<'sommet'>,\n    readonly \"ID_destination\": Identifiant<'sommet'>,\n    readonly \"type\": TypeMessageJeu1,\n    readonly \"contenu\": Mot,\n    readonly \"date\": FormatDateFrEX // Emission\n}\n\nexport type EtiquetteMessageJeu1 = 'ID' | 'type' | 'date' | 'ID_de' | 'ID_à' | 'contenu';\n\n// Structure immutable\nexport class MessageJeu1 extends\n    Message<FormatMessageJeu1EX, FormatMessageJeu1EX, EtiquetteMessageJeu1> {\n\n    constructor(etat: FormatMessageJeu1EX) {\n        super((x) => x, etat);\n    }\n\n    net(e: EtiquetteMessageJeu1): string {\n        let msg = this.ex();\n        switch (e) {\n            case 'ID': return msg.ID.val;\n            case 'type': return TypeMessageJeu1[msg.type];\n            case 'date': return creerDate(msg.date).representation();\n            case 'ID_de': return msg.ID_origine.val;\n            case 'ID_à': return msg.ID_destination.val;\n            case 'contenu': return msg.contenu.representation();\n        }\n        return jamais(e);\n    }\n\n    representation(): string {\n        let idm = this.net('ID');\n        let dem = this.net('ID_de');\n        let am = this.net('ID_à');\n        let typem = this.net('type');\n        let datem = this.net('date');\n        let cm = this.net('contenu');\n        return idm + \" - \" + datem + \", de \" + dem + \" à \" + am + \" (\" + typem + \") - \" + cm;\n    }\n\n\n    // 2. Client : Transmettre un message INIT pour TRANSIT.\n    // 3. Client : Transmettre un message TRANSIT pour TRANSIT.\n    avecAdresses(ID_origine: string, ID_destination: string): MessageJeu1 {\n        let msg = this.ex();\n        return new MessageJeu1({\n            \"ID\": msg.ID,\n            \"ID_origine\": { val: ID_origine, sorte: 'sommet' },\n            \"ID_destination\": { val: ID_destination, sorte: 'sommet' },\n            \"type\": msg.type,\n            \"contenu\": msg.contenu,\n            \"date\": msg.date\n        });\n    }\n\n    // 2. Serveur : Identifier le message en TRANSIT.\n    enTransit(): MessageJeu1 {\n        let msg = this.ex();\n        return new MessageJeu1({\n            \"ID\": msg.ID,\n            \"ID_origine\": msg.ID_origine,\n            \"ID_destination\": msg.ID_destination,\n            \"type\": TypeMessageJeu1.TRANSIT,\n            \"contenu\": msg.contenu,\n            \"date\": msg.date\n        });\n    }\n\n    // 3. Serveur : Accuser réception en TRANSIT (SUCCES ou ECHEC).\n    transitAvecAccuseReception(statut: AR): MessageJeu1 {\n        let msg = this.ex();\n        let type: TypeMessageJeu1;\n        switch (statut) {\n            case AR.SUCCES: type = TypeMessageJeu1.SUCCES_TRANSIT; break;\n            case AR.ECHEC: type = TypeMessageJeu1.ECHEC_TRANSIT; break;\n            default: return jamais(statut);\n        }\n        return new MessageJeu1({\n            \"ID\": msg.ID,\n            \"ID_origine\": msg.ID_origine,\n            \"ID_destination\": msg.ID_destination,\n            \"type\": type,\n            \"contenu\": msg.contenu,\n            \"date\": msg.date\n        });\n    }\n\n    // 4. Client : Ignorer un message en TRANSIT (IGNOR).\n    aIgnorer(): MessageJeu1 {\n        let msg = this.ex();\n        return new MessageJeu1({\n            \"ID\": msg.ID,\n            \"ID_origine\": msg.ID_origine,\n            \"ID_destination\": msg.ID_destination,\n            \"type\": TypeMessageJeu1.IGNOR,\n            \"contenu\": msg.contenu,\n            \"date\": msg.date\n        });\n    }\n\n    // 5. Client : Consulter un message en TRANSIT (FIN).\n    aConsulter(): MessageJeu1 {\n        let msg = this.ex();\n        return new MessageJeu1({\n            \"ID\": msg.ID,\n            \"ID_origine\": msg.ID_origine,\n            \"ID_destination\": msg.ID_destination,\n            \"type\": TypeMessageJeu1.FIN,\n            \"contenu\": msg.contenu,\n            \"date\": msg.date\n        });\n    }\n\n    // 5. Serveur : Accuser réception en FIN (SUCCES ou ECHEC).\n    aConsulterAvecAccuseReception(statut: AR): MessageJeu1 {\n        let msg = this.ex();\n        let type: TypeMessageJeu1;\n        switch (statut) {\n            case AR.SUCCES: type = TypeMessageJeu1.SUCCES_FIN; break;\n            case AR.ECHEC: type = TypeMessageJeu1.ECHEC_FIN; break;\n            default: return jamais(statut);\n        }\n        return new MessageJeu1({\n            \"ID\": msg.ID,\n            \"ID_origine\": msg.ID_origine,\n            \"ID_destination\": msg.ID_destination,\n            \"type\": type,\n            \"contenu\": msg.contenu,\n            \"date\": msg.date\n        });\n    }\n}\n\n// 1. Client : Produire un message INIT.\nexport function creerMessageInitial(contenu: Mot) {\n    return new MessageJeu1({\n        \"ID\": messageInconnu,\n        \"ID_origine\": sommetInconnu,\n        \"ID_destination\": sommetInconnu,\n        \"type\": TypeMessageJeu1.INIT,\n        \"contenu\": contenu,\n        \"date\": creerDateMaintenant().ex()\n    });\n}\n\n/* TODO gestion des erreurs\n\n\nexport function creerMessageErreurConnexion(emetteur: string, messageErreur: string): MessageJeu1 {\n    return new MessageJeu1({\n        \"emetteur\": emetteur,\n        \"destinataire\": emetteur,\n        \"type\": TypeMessageJeu1.ERREUR_CONNEXION,\n        \"contenu\": messageErreur,\n        \"date\": new Date()\n    });\n}\n\nexport function creerMessageCommunication(emetteur: string, destinataire: string, texte: string): MessageJeu1 {\n    return new MessageJeu1({\n        \"emetteur\": emetteur,\n        \"destinataire\": destinataire,\n        \"type\": TypeMessageJeu1.COM,\n        \"contenu\": texte,\n        \"date\": new Date()\n    });\n}\n\nexport function creerMessageRetourErreur(original: MessageJeu1, codeErreur: TypeMessageJeu1, messageErreur: string): MessageJeu1 {\n    return new MessageJeu1({\n        \"emetteur\": original.enJSON().emetteur,\n        \"destinataire\": original.enJSON().destinataire,\n        \"type\": codeErreur,\n        \"contenu\": messageErreur,\n        \"date\": original.enJSON().date\n    });\n}\n*/\n\n/*\nExemple de description d'une configuration - TODO approximative\n- noeud de centre : {\"id\":\"id-1\",\"domaine\":[BLANC, NOIR, BLANC], \"population\" : { \"nombre\":4, utilisateurs : {\"titi\" : ...}}}\n- noeud de voisins : {\"id-2\":{\"id\":\"id-2\",\"domaine\":[NOIR, NOIR, BLANC]},\"id-0\":{\"id\":\"id-0\",\"domaine\":[BLANC, NOIR, NOIR]}}\n\n*/\n\nexport interface FormatUtilisateurEX extends FormatIdentifiableEX<'utilisateur'> {\n    readonly \"pseudo\": Mot, // TODO ajouter d'autres caractéristiques\n}\n\nexport type EtiquetteUtilisateur = 'ID' | 'nom';\n\nexport class Utilisateur extends\n    Enveloppe<FormatUtilisateurEX, FormatUtilisateurEX, EtiquetteUtilisateur> {\n\n    constructor(u: FormatUtilisateurEX) {\n        super((x) => x, u);\n    }\n\n    net(e: EtiquetteUtilisateur): string {\n        let u = this.ex();\n        switch (e) {\n            case 'ID': return u.ID.val;\n            case 'nom': return u.pseudo.representation();\n        }\n        return jamais(e);\n    }\n\n    representation(): string {\n        return this.net('nom') + \" (\" + this.net('ID') + \")\";\n    }\n\n}\n\nexport function creerUtilisateur(u: FormatUtilisateurEX): Utilisateur {\n    return new Utilisateur(u);\n}\n\nexport type FormatPopulationLocaleIN = FormatTableIN<FormatUtilisateurEX>; // inutile\nexport type FormatPopulationLocaleEX = FormatTableEX<FormatUtilisateurEX>;\n\n// inutile export type EtiquettePopulationLocale = 'effectif' | 'utilisateurs';\n\nexport class PopulationLocale\n    extends TableIdentification<'utilisateur',\n    FormatUtilisateurEX, FormatUtilisateurEX> {\n    constructor(pop: FormatPopulationLocaleEX) {\n        super('utilisateur', (x) => x, pop);\n    }\n    pourChaque(\n        f: (ID_util: Identifiant<'utilisateur'>, val: FormatUtilisateurEX) => void\n    ): void {\n        this.pourChaque(f);\n    }\n}\n\nexport function creerPopulationLocaleVide(): PopulationLocale {\n    return new PopulationLocale({ table: {} });\n}\nexport function creerPopulationLocale(pop: FormatPopulationLocaleEX)\n    : PopulationLocale {\n    return new PopulationLocale(pop);\n}\n\n\nexport function peuplerPopulationLocale(\n    prefixe: string, noms: Mot[]): PopulationLocale {\n    let identification: Identification<'utilisateur'>\n        = creerIdentificationParCompteur(prefixe);\n    let pop = creerPopulationLocaleVide();\n    noms.forEach((nom: Mot, i: number, tab: Mot[]) => {\n        let u: FormatUtilisateurEX\n            = { ID: identification.identifier('utilisateur'), pseudo: tab[i] };\n        pop.ajouter(u.ID, u);\n    });\n    return pop;\n}\n\n\n/* inutile\nexport interface FormatConfigurationJeu1IN\n    extends FormatConfigurationInitiale {\n    readonly \"centre\": FormatSommetJeu1EX,\n    readonly \"population\": FormatPopulationLocaleIN,\n    readonly \"utilisateur\": FormatUtilisateurEX,\n    readonly \"voisins\": FormatTableIN<FormatSommetJeu1EX>,\n    readonly \"date\": Date\n}\n*/\n\nexport interface FormatConfigurationJeu1EX\n    extends FormatConfigurationInitiale {\n    readonly \"centre\": FormatSommetJeu1EX,\n    readonly \"population\": FormatPopulationLocaleEX,\n    readonly \"utilisateur\": FormatUtilisateurEX,\n    readonly \"voisins\": FormatTableEX<FormatSommetJeu1EX>,\n    readonly \"date\": FormatDateFrEX\n}\n\nexport type EtiquetteConfigurationJeu1 = 'centre' | 'population' | 'utilisateur' | 'voisins' | 'date';\n\nexport class ConfigurationJeu1\n    extends Configuration<\n    FormatConfigurationJeu1EX, FormatConfigurationJeu1EX,\n    EtiquetteConfigurationJeu1> {\n\n    constructor(c: FormatConfigurationJeu1EX) {\n        super((x) => x, c);\n    }\n\n    net(e: EtiquetteConfigurationJeu1): string {\n        let config = this.ex();\n        switch (e) {\n            case 'centre': return creerSommetJeu1(config.centre).representation();\n            case 'population':\n                return creerTableImmutable(config.population).representation();\n            case 'utilisateur': return creerUtilisateur(config.utilisateur).representation();\n            case 'voisins': return creerTableImmutable(config.voisins).representation();\n            case 'date': return creerDate(config.date).representation();\n        }\n        return jamais(e);\n    }\n\n    representation(): string {\n        let c = this.net('centre');\n        let pop = this.net('population');\n        let util = this.net('utilisateur');\n        let v = this.net('voisins');\n        let d = this.net('date');\n        return \"(centre : \" + c\n            + \" ; population : \" + pop\n            + \" ; utilisateur : \" + util\n            + \" ; voisins : \" + v\n            + \" ; crée le : \" + d + \")\";\n    }\n}\n\nexport function creerConfigurationJeu1(c: FormatConfigurationJeu1EX) {\n    return new ConfigurationJeu1(c);\n}\n\n\nexport function composerConfigurationJeu1(\n    n: FormatNoeudJeu1EX,\n    pop: FormatPopulationLocaleEX,\n    u: FormatUtilisateurEX,\n    date: FormatDateFrEX): ConfigurationJeu1 {\n    return new ConfigurationJeu1({\n        \"configurationInitiale\": Unite.ZERO,\n        \"centre\": n.centre,\n        \"population\": pop,\n        \"utilisateur\": u,\n        \"voisins\": n.voisins,\n        \"date\": date\n    });\n}\n\nexport function decomposerConfiguration(c: ConfigurationJeu1)\n    : [FormatNoeudJeu1EX, FormatPopulationLocaleEX, FormatUtilisateurEX] {\n    let config = c.ex();\n    let centre: FormatSommetJeu1EX = config.centre;\n    let voisins = config.voisins;\n    let n: FormatNoeudJeu1EX = { \"centre\": centre, \"voisins\": voisins };\n    let pop = config.population;\n    let u = config.utilisateur;\n    return [n, pop, u];\n}\n\nexport interface FormatErreurJeu1EX extends FormatErreurRedhibitoire {\n    readonly \"messageErreur\": string,\n    readonly \"date\": FormatDateFrEX\n}\n\nexport type EtiquetteErreurJeu1 = 'messageErreur' | 'date';\n\nexport class ErreurJeu1\n    extends ErreurRedhibitoire<\n    FormatErreurJeu1EX, FormatErreurJeu1EX, EtiquetteErreurJeu1\n    > {\n\n    constructor(err: FormatErreurJeu1EX) {\n        super((x) => x, err);\n    }\n\n    net(e: EtiquetteErreurJeu1): string {\n        let erreur = this.ex();\n        switch (e) {\n            case 'messageErreur': return erreur.messageErreur;\n            case 'date': return creerDate(erreur.date).representation();\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return \"[\" + this.net('date') + \" : \" + this.net('messageErreur') + \"]\";\n    }\n}\n\nexport function creerErreurJeu1(err: FormatErreurJeu1EX): ErreurJeu1 {\n    return new ErreurJeu1(err);\n}\n\n\nexport function composerErreurJeu1(msg: string, date: FormatDateFrEX): ErreurJeu1 {\n    return new ErreurJeu1({\n        \"erreurRedhibitoire\": Unite.ZERO,\n        \"messageErreur\": msg,\n        \"date\": date\n    });\n}\n\nexport function creerAnneauJeu1(domaines: Mot[]): ReseauJeu1 {\n    let assembleur: AssemblageReseauJeu1\n        = creerAssemblageReseauEnAnneau(domaines.length, creerNoeudJeu1IN);\n    let identification: Identification<'sommet'>\n        = creerIdentificationParCompteur(\"DOM-\");\n    domaines.forEach((dom: Mot, i: number, tab: Mot[]) => {\n        let s: FormatSommetJeu1EX\n            = { ID: identification.identifier('sommet'), domaine: tab[i] };\n        assembleur.ajouterSommet(s);\n    });\n    return assembleur.assembler();\n}\n\nclass TableUtilisateurs\n    extends TableIdentification<'utilisateur',\n    FormatUtilisateurEX, FormatUtilisateurEX> {\n    constructor() {\n        super('utilisateur', (x) => x);\n    }\n}\n\nexport class PopulationParDomaine\n    extends TableIdentification<'sommet',\n    TableUtilisateurs,\n    FormatPopulationLocaleEX\n    > {\n\n    constructor() {\n        super('sommet', (t: TableUtilisateurs) => t.ex());\n    }\n\n    contientUtilisateur(ID_dom: Identifiant<'sommet'>, ID_util: Identifiant<'utilisateur'>): boolean {\n        if (!this.contient(ID_dom)) {\n            return false;\n        }\n        return this.valeurIN(ID_dom).contient(ID_util);\n    }\n\n    utilisateur(ID_dom: Identifiant<'sommet'>, ID_util: Identifiant<'utilisateur'>): FormatUtilisateurEX {\n        return this.valeurIN(ID_dom).valeur(ID_util);\n    }\n\n\n    ajouterDomaine(ID_dom: Identifiant<'sommet'>) {\n        this.ajouter(ID_dom, new TableUtilisateurs());\n    }\n\n    ajouterUtilisateur(ID_dom: Identifiant<'sommet'>, u: FormatUtilisateurEX) {\n        this.valeurIN(ID_dom).ajouter(u.ID, u);\n    }\n\n    retirerUtilisateur(ID_dom: Identifiant<'sommet'>, ID_util: Identifiant<'utilisateur'>) {\n        this.valeurIN(ID_dom).retirer(ID_util);\n    }\n\n    selectionnerUtilisateur(): [Identifiant<'sommet'>, Identifiant<'utilisateur'>] {\n        let ID_dom = this.selectionCleSuivantCritereIn(pop => !pop.estVide());\n        let ID_util = this.valeurIN(ID_dom).selectionCle();\n        return [ID_dom, ID_util];\n    }\n\n}\n\nexport function creerVidePopulationParDomaine() {\n    return new PopulationParDomaine();\n}\n\nexport function assemblerPopulationParDomaine(\n    reseau: ReseauJeu1, noms: Mot[]): PopulationParDomaine {\n    let popDom = creerVidePopulationParDomaine();\n    reseau.pourChaqueNoeud((ID_dom, n) => {\n        popDom.ajouterDomaine(ID_dom);\n        let popLoc = peuplerPopulationLocale(\"UTIL-\" + ID_dom.val + \"-\", noms);\n        popLoc.pourChaque((ID_util, u) => {\n            popDom.ajouterUtilisateur(ID_dom, u);\n        })\n    });\n    return popDom;\n}\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./jeu1_adressageRoutage/commun/jeu1_adressageRoutage.ts","// Revue 02/08 - Testé.\nimport { normalisationNombre, jamais } from \"./outils\";\n\n// Les enum sont des sous-types de number.\nexport enum Unite { ZERO }\nexport enum Deux {\n    ZERO,\n    UN\n}\n\n// Problème / readonly properties\n// Cf. https://github.com/Microsoft/TypeScript/issues/13347\n// Interface with readonly property is assignable to interface with mutable property.\n// Remède : par défaut, les champs sont en lecture seulement. Lorsque ce n'est pas le cas, on rajoute \n//   un champ (mutable : Unite). Lorsqu'il s'agit de champs indexés, on introduit un champ table contenant \n//   la structure. Voir FormatTableIN ci-dessous. \nexport interface Mutable {\n    mutable: Unite\n}\n\n// Inutile.\nexport type EnLecture<T> = {\n    readonly [P in keyof T]: T[P];\n}\n\n// Types formats JSON : FormatX par convention\n// Il est recommandé de choisir le plus possible des formats immutables.\n// Format ::= { (readonly etiquette : Format)*} \n//          | { (readonly etiquette : Format)*, (etiquette : Format)+, mutable : Unite} \n//          | { readonly table: { readonly [cle: string]: T }}\n//          | { readonly table: { [cle: string]: T }}\n//          | { table: { readonly [cle: string]: T }, mutable : Unite}\n//          | { table: { [cle: string]: T }, mutable : Unite}\n\n// Modèle générique d'une enveloppe d'un état\n// TEX : type de sortie immutable (souvent format JSON en lecture seulement)\n// TIN : type d'entrée pour l'état en format JSON ou non (mutable ou non, confiné si mutable)\n// E : étiquettes utiles pour une représentation (cf. méthode net)\n// La différence entre TIN et TEX permet de gérer les effets de bord sur l'état, souvent au format JSON.\n// Une fonction de conversion de TIN vers TEX est requise.\n// Toute méthode ayant une occurrence positive de TIN est protected. En effet, elle est susceptible\n//   de permettre un effet de bord sur l'état s'il est mutable.\n// Cette classe abstraite doit être étedue ;\n// - implémentation de net et représenter,\n// - extension par de méthodes modifiant ou observant l'état.\n\nexport abstract class Enveloppe<TIN, TEX, E extends string> {\n    private etat: TIN;\n    protected inEnEx: (x: TIN) => TEX;\n    constructor(inEnEx: (x: TIN) => TEX, etat: TIN) {\n        this.etat = etat;\n        this.inEnEx = inEnEx;\n    }\n    protected in(): TIN {\n        return this.etat;\n    }\n    ex(): TEX {\n        return this.inEnEx(this.etat);\n    }\n    // transformation brute du json de type TIN en string\n    brut(): string {\n        return JSON.stringify(this.etat);\n    };\n    // représentation dans un json simplifié\n    abstract net(etiquette: E): string;\n    abstract representation(): string;\n}\n\n/* ***********************************************************************************************\n*\n*/\n\nexport enum Semaine {\n    LUNDI,\n    MARDI,\n    MERCREDI,\n    JEUDI,\n    VENDREDI,\n    SAMEDI,\n    DIMANCHE\n}\n\nexport enum Mois {\n    JANVIER, FEVRIER, MARS,\n    AVRIL, MAI, JUIN,\n    JUILLET, AOUT, SEPTEMBRE,\n    OCTOBRE, NOVEMBRE, DECEMBRE\n}\n\nexport interface FormatDateFrEX {\n    readonly seconde: number;\n    readonly minute: number;\n    readonly heure: number;\n    readonly jourSemaine: Semaine;\n    readonly jourMois: number;\n    readonly mois: Mois;\n    readonly annee: number;\n}\n\nexport type EtiquetteDateFr =\n    'heure'\n    | 'jourSemaine' | 'jourMois'\n    | 'moisLettre' | 'moisNumero'\n    | 'annee'\n    | 'date' | 'dateLongue';\n\n\nexport interface DateImmutable {\n    ex() : FormatDateFrEX;\n    detail(e: EtiquetteDateFr): string;\n    representation(): string;\n    representationLongue() : string;\n    representationLog() : string;\n}\n\nexport function conversionDate(d: Date): FormatDateFrEX {\n    return {\n        seconde: d.getSeconds(),\n        minute: d.getMinutes(),\n        heure: d.getHours(),\n        jourSemaine: (d.getDay() + 6)%7,\n        jourMois: d.getDate(),\n        mois: d.getMonth(),\n        annee: d.getFullYear()\n    };\n}\n\n\nexport class DateFrEnveloppe extends Enveloppe<FormatDateFrEX, FormatDateFrEX, EtiquetteDateFr>\n    implements DateImmutable {\n\n    net(e: EtiquetteDateFr): string {\n        // A déplacer sous les cas.\n        let s = normalisationNombre(this.in().seconde, 2);\n        let min = normalisationNombre(this.in().minute, 2);\n        let h = normalisationNombre(this.in().heure, 2);\n        let js = this.in().jourSemaine;\n        let jsL = Semaine[js].toLowerCase();\n        let jm = normalisationNombre(this.in().jourMois, 2);\n        let mo = this.in().mois;\n        let moL = Mois[mo].toLowerCase();\n        let moN = normalisationNombre(mo + 1, 2);\n        let a = this.in().annee.toString();\n\n        switch (e) {\n            case 'heure': return `${h}:${min}:${s}`;\n            case 'jourSemaine': return jsL;\n            case 'jourMois': return jm;\n            case 'moisLettre': return moL;\n            case 'moisNumero': return moN;\n            case 'annee': return a;\n            case 'date': return `${jm}/${moN}/${a}`;\n            case 'dateLongue': return `${jsL} ${jm} ${moL} ${a}`\n        }\n        return jamais(e);\n    }\n    detail(e: EtiquetteDateFr): string {\n        return this.detail(e);\n    }\n    representation(): string {\n        return this.net('heure') + \", le \" + this.net('date');\n    }\n    representationLongue() : string {\n        return this.net('heure') + \", le \" + this.net('dateLongue');\n    }\n    representationLog() : string {\n        return this.net('heure') + \" \" + this.net('date');\n    }\n\n}\n\nexport function creerDateMaintenant(): DateImmutable {\n    return new DateFrEnveloppe(x => x, conversionDate(new Date()));\n}\n\nexport function creerDate(d : FormatDateFrEX): DateImmutable {\n    return new DateFrEnveloppe(x => x, d);\n}\n\n/* ************************************************************************************************\n* Tableau.\n*/\n\nexport interface FormatTableauIN<T> extends Mutable {\n    readonly taille: number;\n    readonly tableau: T[]\n}\n\nexport interface FormatTableauEX<T> {\n    readonly taille: number;\n    readonly tableau: ReadonlyArray<T>\n}\n\nexport class ModuleTableau {\n\n    pourChaque<T>(\n        f: (index: number, val: T, tab?: ReadonlyArray<T>) => void,\n        t: FormatTableauEX<T>\n    ): void {\n        t.tableau.forEach((v, i, t) => f(i, v, t));\n    }\n\n\n    valeur<T>(t: FormatTableauEX<T>, index: number): T {\n        return t.tableau[index];\n    }\n\n    taille<T>(t: FormatTableauEX<T>): number {\n        return t.tableau.length;\n    }\n\n    foncteur<T, S>(t: FormatTableauEX<T>, f: (x: T) => S): FormatTableauIN<S> {\n        let r: S[] = [];\n        this.pourChaque((i, v) => {\n            r[i] = f(v);\n        }, t);\n        return { taille: r.length, tableau: r, mutable: Unite.ZERO };\n    }\n    reduction<T>(t: FormatTableauEX<T>, neutre: T, op: (x: T, y: T) => T): T {\n        let r: T = neutre;\n        this.pourChaque((i, v) => {\n            r = op(r, v);\n        }, t);\n        return r;\n    }\n    ajouterEnFin<T>(t: FormatTableauIN<T>, x: T): void {\n        t.tableau.push(x);\n    }\n\n    retirerEnFin<T>(t: FormatTableauIN<T>): T {\n        if (t.taille === 0) {\n            throw new Error(\"[Exception : retirerEnFin() non défini.]\");\n        }\n        return <T>t.tableau.pop();\n    }\n\n}\n\nconst MODULE_TABLEAU = new ModuleTableau();\n\nexport type EtiquetteTableau = 'taille' | 'valeurs';\n\n// Conversion pour les tables \nexport function conversionFormatTableau<TIN, TEX>(conv: (x: TIN) => TEX)\n    : (t: FormatTableauIN<TIN>) => FormatTableauEX<TEX> {\n    return (\n        (t: FormatTableauIN<TIN>) => {\n            let r: TEX[] = new Array(t.taille);\n            MODULE_TABLEAU.pourChaque((i, v) => {\n                r[i] = conv(v);\n            }, t);\n            return { taille: t.taille, tableau: r };\n        });\n}\n\n\n\n// Tableau immutable : TIN = TEX (recommandé : immutable)\nexport class TableauImmutable<TEX>\n    extends Enveloppe<FormatTableauEX<TEX>, FormatTableauEX<TEX>, EtiquetteTableau> {\n    constructor(etat: FormatTableauEX<TEX>) {\n        super((x) => x, etat);\n    }\n    net(e: EtiquetteTableau): string {\n        switch (e) {\n            case 'taille': return this.taille().toString();\n            case 'valeurs': return this.in().tableau.toString();\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return \"[\" + this.net('valeurs') + \"]\";\n    }\n    pourChaque(\n        f: (index: number, val: TEX, tab?: TEX[]) => void\n    ): void {\n        MODULE_TABLEAU.pourChaque(f, this.in());\n    }\n    foncteur<S>(f: (x: TEX) => S): TableauImmutable<S> {\n        return new TableauImmutable(MODULE_TABLEAU.foncteur(this.in(), f));\n    }\n    reduction(neutre: TEX, op: (x: TEX, y: TEX) => TEX): TEX {\n        return MODULE_TABLEAU.reduction(this.in(), neutre, op);\n    }\n    valeur(index: number): TEX {\n        return MODULE_TABLEAU.valeur(this.in(), index);\n    }\n    taille(): number {\n        return MODULE_TABLEAU.taille(this.in());\n    }\n    estVide(): boolean {\n        return this.taille() === 0;\n    }\n}\n\nexport function creerTableauImmutable<TEX>(t: ReadonlyArray<TEX>)\n    : TableauImmutable<TEX> {\n    return new TableauImmutable({\n        taille: t.length,\n        tableau: t\n    });\n}\n\n// Tableau mutable - TIN peut être différent de TEX.\n//   Recommandé : TEX immutable.\n// Attention : la méthode ex() requiert un parcours du tableau formant l'état.\nexport class Tableau<TIN, TEX>\n    extends Enveloppe<FormatTableauIN<TIN>, FormatTableauEX<TEX>, EtiquetteTableau> {\n\n    constructor(\n        protected valInVersEx: (x: TIN) => TEX,\n        etat: FormatTableauIN<TIN> = { taille: 0, tableau: [], mutable: Unite.ZERO }) {\n        super(conversionFormatTableau(valInVersEx), etat);\n    }\n\n    net(e: EtiquetteTableau): string {\n        switch (e) {\n            case 'taille': return this.taille().toString();\n            case 'valeurs': return this.in().tableau.toString();\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return \"[\" + this.net('valeurs') + \"]\";\n    }\n\n    protected pourChaqueIn(\n        f: (index: number, val: TIN, tab?: TIN[]) => void\n    ): void {\n        MODULE_TABLEAU.pourChaque(f, this.in());\n    }\n\n    pourChaque(\n        f: (index: number, val: TEX) => void\n    ): void {\n        this.pourChaqueIn((i, v, t) => f(i, this.valInVersEx(v)));\n    }\n    valeurIn(i: number): TIN {\n        return MODULE_TABLEAU.valeur(this.in(), i);\n    }\n\n    valeur(i: number): TEX {\n        return this.valInVersEx(this.valeurIn(i));\n    }\n    taille(): number {\n        return MODULE_TABLEAU.taille(this.in());\n    }\n    estVide(): boolean {\n        return this.taille() === 0;\n    }\n    ajouterEnFin(x: TIN): void {\n        MODULE_TABLEAU.ajouterEnFin(this.in(), x);\n    }\n    retirerEnFin(): void {\n        MODULE_TABLEAU.retirerEnFin(this.in());\n    }\n}\n\nexport function creerTableauVide<TIN, TEX>(valInVersEx: (x: TIN) => TEX) {\n    return new Tableau(valInVersEx);\n}\n\n\n/* ***********************************************************************************************\n * Table mutable.\n * On définit un type pour les tables car il est impossible d'avoir un type indexé avec un champ \n * supplémentaire :\n * { [cle: string]: T }, mutable : Unite\n*/\nexport interface FormatTableIN<T> extends Mutable {\n    readonly table: { [cle: string]: T }\n}\n\nexport interface FormatTableEX<T> {\n    readonly table: { readonly [cle: string]: T }\n}\n\n// Un module réservoir de fonctions utiles sur les tables.\nexport class ModuleTable {\n\n    pourChaque<T>(\n        f: (cle: string, val: T, tab?: { [cle: string]: T }) => void,\n        t: FormatTableEX<T>\n    ): void {\n        for (let c in t.table) {\n            f(c, t.table[c], t.table);\n        }\n    }\n\n\n    valeur<T>(t: FormatTableEX<T>, cle: string): T {\n        return t.table[cle];\n    }\n    contient<T>(t: FormatTableEX<T>, cle: string): boolean {\n        if (t.table[cle]) {\n            return true;\n        }\n        return false;;\n    }\n    image<T>(t: FormatTableEX<T>): T[] {\n        let tab: T[] = [];\n        this.pourChaque((c, v) => {\n            tab.push(v);\n        }, t);\n        return tab;\n    }\n    domaine<T>(t: FormatTableEX<T>): string[] {\n        let tab: string[] = [];\n        this.pourChaque((c, v) => {\n            tab.push(c);\n        }, t);\n        return tab;\n    }\n\n    taille<T>(t: FormatTableEX<T>): number {\n        let n: number = 0;\n        this.pourChaque((c, v) => {\n            n++;\n        }, t);\n        return n;\n    }\n\n    foncteur<T, S>(t: FormatTableEX<T>, f: (x: T) => S): FormatTableIN<S> {\n        let r: { [cle: string]: S }\n            = {};\n        this.pourChaque((c, v) => {\n            r[c] = f(v);\n        }, t);\n        return { table: r, mutable: Unite.ZERO };\n    }\n\n    transformationTableVersTableau<T, S>(t: FormatTableEX<T>, f: (cle: string, x: T) => S): S[] {\n        let r: S[] = [];\n        this.pourChaque((c, v) => {\n            r.push(f(c, v));\n        }, t);\n        return r;\n    }\n\n    selectionCle<T>(t: FormatTableEX<T>): string {\n        // sélection d'une clé\n        for (let c in t.table) { // une seule itération\n            return c;\n        }\n        throw new Error(\"[Exception : selectionCle() non défini.]\");\n    }\n\n    selectionCleSuivantCritere<T>(t: FormatTableEX<T>, prop: (x: T) => boolean): string {\n        // sélection d'une clé\n        for (let c in t.table) { // une seule itération\n            if (prop(t.table[c])) {\n                return c;\n            }\n        }\n        throw new Error(\"[Exception : selectionCleSuivantCritere() non défini.]\");\n    }\n\n\n    ajouter<T>(t: FormatTableIN<T>, cle: string, x: T): void {\n        t.table[cle] = x;\n    }\n\n    retirer<T>(t: FormatTableIN<T>, cle: string): void {\n        delete t.table[cle];\n    }\n\n}\n\nconst MODULE_TABLE = new ModuleTable();\n\n// Conversion pour les tables \nexport function conversionFormatTable<TIN, TEX>(conv: (x: TIN) => TEX)\n    : (t: FormatTableIN<TIN>) => FormatTableEX<TEX> {\n    return (\n        (t: FormatTableIN<TIN>) => {\n            let r: { [cle: string]: TEX } = {};\n            MODULE_TABLE.pourChaque((c, v) => {\n                r[c] = conv(v);\n            }, t);\n            return { table: r };\n        });\n}\nexport type EtiquetteTable = 'taille' | 'graphe' | 'domaine' | 'image';\n\n// Table immutable : TIN = TEX (recommandé : immutable)\nexport class TableImmutable<TEX>\n    extends Enveloppe<FormatTableEX<TEX>, FormatTableEX<TEX>, EtiquetteTable> {\n    constructor(etat: FormatTableEX<TEX>) {\n        super((x) => x, etat);\n    }\n    net(e: EtiquetteTable): string {\n        switch (e) {\n            case 'taille': return this.taille().toString();\n            case 'domaine': return this.domaine().toString();\n            case 'image': return this.image().map((v, i, t) => JSON.stringify(v)).toString();\n            case 'graphe': return this.brut();\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return this.net('graphe');\n    }\n    pourChaque(\n        f: (cle: string, val: TEX, tab?: { [cle: string]: TEX }) => void\n    ): void {\n        MODULE_TABLE.pourChaque(f, this.in());\n    }\n    valeur(cle: string): TEX {\n        return MODULE_TABLE.valeur(this.in(), cle);\n    }\n    contient(cle: string): boolean {\n        return MODULE_TABLE.contient(this.in(), cle);\n    }\n    image(): TEX[] {\n        return MODULE_TABLE.image(this.in());\n    }\n    domaine(): string[] {\n        return MODULE_TABLE.domaine(this.in());\n    }\n    taille(): number {\n        return MODULE_TABLE.taille(this.in());\n    }\n    selectionCle(): string {\n        return MODULE_TABLE.selectionCle(this.in());\n    }\n    selectionCleSuivantCritere(prop: (x: TEX) => boolean): string {\n        return MODULE_TABLE.selectionCleSuivantCritere(this.in(), prop);\n    }\n\n    application<T>(f: (x : TEX) => T) : TableImmutable<T> {\n        return new TableImmutable<T>(\n            MODULE_TABLE.foncteur(this.in(), f)\n        );\n    }\n}\n\nexport function creerTableImmutable<TEX>(t: FormatTableEX<TEX>)\n    : TableImmutable<TEX> {\n    return new TableImmutable(t);\n}\n\n// Table mutable - TIN peut être différent de TEX.\n//   Recommandé : TEX immutable.\n// Attention : la méthode ex() requiert un parcours de la table formant l'état.\nexport class Table<TIN, TEX>\n    extends Enveloppe<FormatTableIN<TIN>, FormatTableEX<TEX>, EtiquetteTable> {\n\n    constructor(protected valInVersEx: (x: TIN) => TEX, etat: FormatTableIN<TIN>) {\n        super(conversionFormatTable(valInVersEx), etat);\n    }\n\n    net(e: EtiquetteTable): string {\n        switch (e) {\n            case 'taille': return this.taille().toString();\n            case 'domaine': return this.domaine().toString();\n            case 'image': return this.image().map((v, i) => JSON.stringify(v)).toString();\n            case 'graphe': return this.brut();\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return this.net('graphe');\n    }\n    protected pourChaqueIn(\n        f: (cle: string, val: TIN, tab?: { [cle: string]: TIN }) => void\n    ): void {\n        MODULE_TABLE.pourChaque(f, this.in());\n    }\n    pourChaque(\n        f: (cle: string, val: TEX) => void\n    ): void {\n        this.pourChaqueIn((c, v, t) => f(c, this.valInVersEx(v)))\n        // moins efficace (deux parcours) : MODULE_TABLE.pourChaque(f, this.ex());\n    }\n    valeurIn(cle: string): TIN {\n        return MODULE_TABLE.valeur(this.in(), cle);\n    }\n\n    valeur(cle: string): TEX {\n        return this.valInVersEx(this.valeurIn(cle));\n        // moins efficace : MODULE_TABLE.valeur(this.ex(), cle);\n    }\n    contient(cle: string): boolean {\n        return MODULE_TABLE.contient(this.in(), cle);\n    }\n    protected imageIn(): TIN[] {\n        return MODULE_TABLE.image(this.in());\n    }\n    image(): TEX[] {\n        return MODULE_TABLE.transformationTableVersTableau(this.in(), (c, v) => this.valInVersEx(v));\n        // moins efficace : MODULE_TABLE.image(this.ex());\n    }\n    domaine(): string[] {\n        return MODULE_TABLE.domaine(this.in());\n    }\n    taille(): number {\n        return MODULE_TABLE.taille(this.in());\n    }\n    estVide(): boolean {\n        return this.taille() === 0;\n    }\n    selectionCle(): string {\n        return MODULE_TABLE.selectionCle(this.in());\n    }\n    protected selectionCleSuivantCritereIn(prop: (x: TIN) => boolean): string {\n        return MODULE_TABLE.selectionCleSuivantCritere(this.in(), prop);\n    }\n    selectionCleSuivantCritere(prop: (x: TEX) => boolean): string {\n        return this.selectionCleSuivantCritereIn(x => prop(this.valInVersEx(x)));\n        // moins efficace : MODULE_TABLE.selectionCleSuivantCritere(this.ex(), prop);\n    }\n    ajouter(cle: string, x: TIN): void {\n        MODULE_TABLE.ajouter(this.in(), cle, x);\n    }\n    retirer(cle: string): void {\n        MODULE_TABLE.retirer(this.in(), cle);\n    }\n}\n\nexport function creerTableVide<TIN, TEX>(valInVersEx: (x: TIN) => TEX) {\n    return new Table(valInVersEx, { table: {}, mutable: Unite.ZERO });\n}\n// Identifiant\n// à utiliser avec Sorte = 'sorte à identifier' (chaine singleton)\n// Usage : \n// - let id :Identifiant<'sorte'>\n// - lecture : id.sorte de type string\n// - création :  { sorte : \"identite\"} \n// Permet de typer les identifiants par sorte.\n// Les identifiants sont toujours accéder via un champ nommé ID ou ID_x.\n\nexport type Identifiant<Sorte extends string> = {\n    readonly val: string;\n    readonly sorte: Sorte;\n}\n\nexport interface FormatIdentifiableIN<Sorte extends string> extends Mutable {\n    ID: Identifiant<Sorte>; // en majuscule par exception\n}\n\nexport interface FormatIdentifiableEX<Sorte extends string> {\n    readonly ID: Identifiant<Sorte>; // en majuscule par exception\n}\n\nexport interface Identification<Sorte extends string> {\n    identifier(s: Sorte): Identifiant<Sorte>;\n}\n\nexport class IdentificationParCompteur<Sorte extends string>\n    implements Identification<Sorte> {\n    private compteur: number;\n    constructor(private prefixe: string) {\n        this.compteur = 0;\n    }\n    identifier(s: Sorte): Identifiant<Sorte> {\n        let id: string = this.prefixe + this.compteur;\n        this.compteur++;\n        return creerIdentifiant(s, id);\n    }\n\n}\n\nexport function creerIdentificationParCompteur<\n    Sorte extends string\n    >(prefixe: string)\n    : Identification<Sorte> {\n    return new IdentificationParCompteur(prefixe);\n}\n\nexport function creerIdentifiant<Sorte extends string>(\n    s: Sorte, cle: string\n): Identifiant<Sorte> {\n    return {\n        val: cle,\n        sorte: s\n    };\n}\n\n/*\n* Table utilisant des identificateurs comme clé.\n* Remarque : les tables précédentes fondées sur les tables en JSON utilisent nécessdairement le type string pour les clés. \n*/\nexport class TableIdentification<Sorte extends string, TIN, TEX>\n    extends Enveloppe<FormatTableIN<TIN>, FormatTableEX<TEX>, EtiquetteTable> {\n    protected sorte: Sorte; // la sorte des clés\n    protected valInVersEx: (x: TIN) => TEX;\n    constructor(\n        sorte: Sorte,\n        valInVersEx: (x: TIN) => TEX,\n        pop: FormatTableEX<TIN> = { table: {} }) {\n        super(conversionFormatTable(valInVersEx), { table: pop.table, mutable: Unite.ZERO });\n        this.sorte = sorte;\n        this.valInVersEx = valInVersEx;\n    }\n\n    net(e: EtiquetteTable): string {\n        switch (e) {\n            case 'taille': return this.taille().toString();\n            case 'domaine': return this.domaine().map((v, i, t) => JSON.stringify(v)).toString();\n            case 'image': return this.image().map((v, i, t) => JSON.stringify(v)).toString();\n            case 'graphe': return JSON.stringify(this.ex().table);\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return this.net('graphe');\n    }\n\n    protected pourChaqueIn(\n        f: (ID_sorte: Identifiant<Sorte>, val: TIN, tab?: { [cle: string]: TIN }) => void\n    ): void {\n        MODULE_TABLE.pourChaque((id, v, t) => f(creerIdentifiant(this.sorte, id), v, t), this.in());\n    }\n    pourChaque(\n        f: (ID_sorte: Identifiant<Sorte>, val: TEX) => void\n    ): void {\n        this.pourChaqueIn((c, v, t) => f(c, this.valInVersEx(v)))\n        // moins efficace (deux parcours) : MODULE_TABLE.pourChaque(f, this.ex());\n    }\n\n    protected valeurIN(ID_sorte: Identifiant<Sorte>): TIN {\n        return MODULE_TABLE.valeur(this.in(), ID_sorte.val);\n    }\n\n    valeur(ID_sorte: Identifiant<Sorte>): TEX {\n        return this.valInVersEx(this.valeurIN(ID_sorte));\n    }\n    contient(ID_sorte: Identifiant<Sorte>): boolean {\n        return MODULE_TABLE.contient(this.in(), ID_sorte.val);\n    }\n    protected imageIn(): TIN[] {\n        return MODULE_TABLE.image(this.in());\n    }\n    image(): TEX[] {\n        return MODULE_TABLE.transformationTableVersTableau(this.in(), (c, v) => this.valInVersEx(v));\n        // moins efficace : MODULE_TABLE.image(this.ex());\n    }\n\n\n    domaine(): Identifiant<Sorte>[] {\n        return MODULE_TABLE.transformationTableVersTableau(this.in(), (c, v) => creerIdentifiant(this.sorte, c));\n        // moins efficace : return MODULE_TABLE.domaine(this.in()).\n        //    map((s) => { return { val: s, sorte: this.sorte } });\n    }\n    selectionCle(): Identifiant<Sorte> {\n        return creerIdentifiant(this.sorte, MODULE_TABLE.selectionCle(this.in()), );\n    }\n    protected selectionCleSuivantCritereIn(prop: (x: TIN) => boolean): Identifiant<Sorte> {\n        return creerIdentifiant(this.sorte, MODULE_TABLE.selectionCleSuivantCritere(this.in(), prop));\n    }\n\n    selectionCleSuivantCritere(prop: (x: TEX) => boolean): Identifiant<Sorte> {\n        return this.selectionCleSuivantCritereIn(x => prop(this.valInVersEx(x)));\n        // moins efficace : MODULE_TABLE.selectionCleSuivantCritere(this.ex(), prop);\n    }\n\n    taille(): number {\n        return MODULE_TABLE.taille(this.in());\n    }\n    estVide(): boolean {\n        return this.taille() === 0;\n    }\n\n\n    ajouter(ID_sorte: Identifiant<Sorte>, x: TIN): void {\n        MODULE_TABLE.ajouter(this.in(), ID_sorte.val, x);\n    }\n\n    retirer(ID_sorte: Identifiant<Sorte>): void {\n        MODULE_TABLE.retirer(this.in(), ID_sorte.val);\n    }\n}\nexport function creerTableIdentificationVide<\n    Sorte extends string, TIN, TEX>(\n    sorte: Sorte,\n    valInVersEx: (x: TIN) => TEX) {\n    return new TableIdentification<Sorte, TIN, TEX>(\n        sorte, valInVersEx);\n}\n\nexport function creerTableIdentification<\n    Sorte extends string, TIN, TEX>(\n    sorte: Sorte,\n    valInVersEx: (x: TIN) => TEX,\n    pop: FormatTableEX<TIN>\n    ) {\n    return new TableIdentification<Sorte, TIN, TEX>(\n        sorte, valInVersEx, pop);\n}\n\n// Version immutable\nexport class TableIdentificationImmutable<Sorte extends string, TEX>\n    extends Enveloppe<FormatTableEX<TEX>, FormatTableEX<TEX>, EtiquetteTable> {\n    protected sorte: Sorte; // la sorte des clés\n    constructor(\n        sorte: Sorte,\n        pop: FormatTableEX<TEX> = { table: {} }) {\n        super(conversionFormatTable((x) => x), pop);\n        this.sorte = sorte;\n    }\n\n    net(e: EtiquetteTable): string {\n        switch (e) {\n            case 'taille': return this.taille().toString();\n            case 'domaine': return this.domaine().map((v, i, t) => JSON.stringify(v)).toString();\n            case 'image': return this.image().map((v, i, t) => JSON.stringify(v)).toString();\n            case 'graphe': return JSON.stringify(this.ex().table);\n        }\n        return jamais(e);\n    }\n    representation(): string {\n        return this.net('graphe');\n    }\n\n    pourChaque(\n        f: (ID_sorte: Identifiant<Sorte>, val: TEX, tab?: { [cle: string]: TEX }) => void\n    ): void {\n        MODULE_TABLE.pourChaque((id, v, t) => f(creerIdentifiant(this.sorte, id), v, t), this.in());\n    }\n\n    valeur(ID_sorte: Identifiant<Sorte>): TEX {\n        return MODULE_TABLE.valeur(this.in(), ID_sorte.val);\n    }\n\n    contient(ID_sorte: Identifiant<Sorte>): boolean {\n        return MODULE_TABLE.contient(this.in(), ID_sorte.val);\n    }\n    image(): TEX[] {\n        return MODULE_TABLE.image(this.in());\n    }\n    domaine(): Identifiant<Sorte>[] {\n        return MODULE_TABLE.transformationTableVersTableau(this.in(), (c, v) => creerIdentifiant(this.sorte, c));\n    }\n    selectionCle(): Identifiant<Sorte> {\n        return creerIdentifiant(this.sorte, MODULE_TABLE.selectionCle(this.in()));\n    }\n    selectionCleSuivantCritere(prop: (x: TEX) => boolean): Identifiant<Sorte> {\n        return creerIdentifiant(this.sorte, MODULE_TABLE.selectionCleSuivantCritere(this.in(), prop));\n    }\n\n    taille(): number {\n        return MODULE_TABLE.taille(this.in());\n    }\n    estVide(): boolean {\n        return this.taille() === 0;\n    }\n\n}\nexport function creerTableIdentificationImmutableVide<\n    Sorte extends string, TEX>(sorte: Sorte)\n    : TableIdentificationImmutable<Sorte, TEX> {\n    return new TableIdentificationImmutable<Sorte, TEX>(sorte);\n}\n\nexport function creerTableIdentificationImmutable<\n    Sorte extends string, TEX>(sorte: Sorte, pop: FormatTableEX<TEX>)\n    : TableIdentificationImmutable<Sorte, TEX> {\n    return new TableIdentificationImmutable<Sorte, TEX>(sorte, pop);\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./bibliotheque/types.ts","export function jamais(x: never): never {\n    throw new Error(\"* Erreur impossible : \" + x);\n}\n\nexport function normalisationNombre(n : number, taille : number){\n    let r = n.toString();\n    while(r.length < taille){\n        r = \"0\" + r;\n    }\n    return r;\n}\n\n\n// WEBPACK FOOTER //\n// ./bibliotheque/outils.ts"],"sourceRoot":""}